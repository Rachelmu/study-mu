(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{393:function(t,e,a){"use strict";a.r(e);var v=a(42),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vue-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-介绍"}},[t._v("#")]),t._v(" Vue 介绍")]),t._v(" "),a("p",[t._v("从今天开始让我们一起来学习Vue相关的知识吧。")]),t._v(" "),a("p",[t._v("Vue 基于 MVVM，但是Vue并不完全遵循MVVM 模型，那什么是MVVM模型呢？让我们一起来看看吧。")]),t._v(" "),a("h1",{attrs:{id:"模型介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型介绍"}},[t._v("#")]),t._v(" 模型介绍")]),t._v(" "),a("h2",{attrs:{id:"mvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" MVC")]),t._v(" "),a("h3",{attrs:{id:"mvc把软件分为三个层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc把软件分为三个层"}},[t._v("#")]),t._v(" MVC把软件分为三个层")]),t._v(" "),a("ul",[a("li",[t._v("视图（View）：用户界面。")]),t._v(" "),a("li",[t._v("控制器（Controller）：业务逻辑")]),t._v(" "),a("li",[t._v("模型（Model）：数据保存")])]),t._v(" "),a("h3",{attrs:{id:"mvc模型数据都是单向的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc模型数据都是单向的"}},[t._v("#")]),t._v(" MVC模型数据都是单向的")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("数据流程")]),t._v(" "),a("p",[t._v("用户行为改变(点击事件)Viwe -> View通知Contoller进行逻辑处理 -> 处理后Controller通知Model层数据改变\n-> Model数据改变后交给View渲染(改变view层)")]),t._v(" "),a("p",[t._v("注:用户也可以直接改变Contoller")])]),t._v(" "),a("h2",{attrs:{id:"mvp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[t._v("#")]),t._v(" MVP")]),t._v(" "),a("ul",[a("li",[t._v("MVP可以看做是MVC的衍生物,在MVP中Model不能直接操作View,且所有的通讯都是双向的")])]),t._v(" "),a("h2",{attrs:{id:"mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[t._v("#")]),t._v(" MVVM")]),t._v(" "),a("ul",[a("li",[t._v("MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动 反映在 ViewModel，反之亦然")])]),t._v(" "),a("h1",{attrs:{id:"vue模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue模型"}},[t._v("#")]),t._v(" Vue模型")]),t._v(" "),a("h2",{attrs:{id:"vue-基于-mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-基于-mvvm"}},[t._v("#")]),t._v(" Vue 基于 MVVM")]),t._v(" "),a("ul",[a("li",[t._v("Vue 基于 MVVM，但是Vue并不完全遵循MVVM 模型")]),t._v(" "),a("li",[t._v("严格意义上在MVVM中 View和Model之间是不能通讯的,但Vue却提供了相应的Api $refs")]),t._v(" "),a("li",[t._v("所以说，Vue并不是正在意义上的MVVM架构,但是思想是借鉴了MVVM然后又进行了些本土化,不过问题不大,现在根据MVVM本土化出来的架构都统称MV*架构")])])])}),[],!1,null,null,null);e.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{367:function(t,a,e){"use strict";e.r(a);var v=e(42),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"html5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5"}},[t._v("#")]),t._v(" HTML5")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5\n")])])]),e("h3",{attrs:{id:"语义化标签类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语义化标签类"}},[t._v("#")]),t._v(" 语义化标签类")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("什么是标签语义化")]),t._v(" "),e("ul",[e("li",[t._v("合理的标签干合适的事情")])])]),t._v(" "),e("li",[e("p",[t._v("都有哪些标签，都是啥意思")]),t._v(" "),e("ul",[e("li",[t._v("块级（display：block）：div 、p、h1~h6、hr、ul、ol、li、dl、dd、form、table、header、footer、main、nav、sector、arcitcle、pre、table、tbody、thead、th、tr、tfoot")]),t._v(" "),e("li",[t._v("行级（display：inline）：a、span、small、strong、em、i、code、")]),t._v(" "),e("li",[t._v("行内块（display：inline-block）：img、input")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("区别")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("1.行内元素与块级函数可以相互转换，通过修改display属性值来切换块级元素和行内元素，行内元素display：inline，块级元素display：block。")]),t._v(" "),e("li",[t._v("2.行内元素和其他行内元素都会在一条水平线上排列，都是在同一行的；块级元素却总是会在新的一行开始排列，各个块级元素独占一行，垂直向下排列，若想使其水平方向排序，可使用左右浮动（float：left/right）让其水平方向排列。")]),t._v(" "),e("li",[t._v("3.行内元素不可以设置宽高，宽度高度随文本内容的变化而变化，但是可以设置行高（line-height），同时在设置外边距margin上下无效，左右有效，内填充padding上下无效，左右有效；块级元素可以设置宽高，并且宽度高度以及外边距，内填充都可随意控制。")]),t._v(" "),e("li",[t._v("4.块级元素可以包含行内元素和块级元素，还可以容纳"),e("a",{attrs:{href:"https://www.baidu.com/s?wd=%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao",target:"_blank",rel:"noopener noreferrer"}},[t._v("内联元素"),e("OutboundLink")],1),t._v("和其他元素；行内元素不能包含块级元素，只能容纳文本或者其他行内元素。")])])]),t._v(" "),e("li",[e("p",[t._v("如何转换")]),t._v(" "),e("ul",[e("li",[t._v("display还有none（隐藏dom）、flex（弹性）、table（表）")])])]),t._v(" "),e("li",[e("p",[t._v("diplay的值都有啥")]),t._v(" "),e("ul",[e("li",[t._v("display：none和visibility：hidden、ocpacity：0（兼容用fliter")]),t._v(" "),e("li",[t._v("filter滤镜：对比度、饱和度、阴影、色相、透明度")])])]),t._v(" "),e("li",[e("p",[t._v("display:none")]),t._v(" "),e("ul",[e("li",[t._v("让元素如何隐藏，你可以怎么做？")]),t._v(" "),e("li",[t._v("display:none和visibility:hidden的区别")]),t._v(" "),e("li",[t._v("opacity的兼容处理")]),t._v(" "),e("li",[t._v("filter还能做哪些事情")])])]),t._v(" "),e("li",[e("p",[t._v("display：flex 响应式、兼容性")]),t._v(" "),e("ul",[e("li",[t._v("项目中你什么时候用到了flex")]),t._v(" "),e("li",[t._v("除了这种方式能居中还有哪些")]),t._v(" "),e("li",[t._v("响应式布局还可以怎么做")]),t._v(" "),e("li",[t._v("都有哪些盒子模型")])])])]),t._v(" "),e("h3",{attrs:{id:"音频处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#音频处理"}},[t._v("#")]),t._v(" 音频处理")]),t._v(" "),e("h3",{attrs:{id:"canvas-webgl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#canvas-webgl"}},[t._v("#")]),t._v(" canvas/webGL")]),t._v(" "),e("h3",{attrs:{id:"history-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#history-api"}},[t._v("#")]),t._v(" history API")]),t._v(" "),e("h3",{attrs:{id:"requestanimationframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe"}},[t._v("#")]),t._v(" requestAnimationFrame")]),t._v(" "),e("h3",{attrs:{id:"地理位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#地理位置"}},[t._v("#")]),t._v(" 地理位置")]),t._v(" "),e("h3",{attrs:{id:"web-scoket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-scoket"}},[t._v("#")]),t._v(" web scoket")]),t._v(" "),e("h1",{attrs:{id:"css3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css3"}},[t._v("#")]),t._v(" CSS3")]),t._v(" "),e("h3",{attrs:{id:"盒子水平垂直居中的五大方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#盒子水平垂直居中的五大方案"}},[t._v("#")]),t._v(" 盒子水平垂直居中的五大方案")]),t._v(" "),e("ul",[e("li",[t._v("项目中经常遇到这种需求，最开始xxx，喜欢用flex，后来发现xxx，在xx博客上突然发现xx更好，xx解决了兼容性（拒绝背书式）")])]),t._v(" "),e("h4",{attrs:{id:"定位-三种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定位-三种"}},[t._v("#")]),t._v(" 定位：三种")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".father{\n\tposition: relative;\n}\n")])])]),e("ul",[e("li",[e("p",[t._v("（1）定位1：需要知道元素的宽高")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box{\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\tmargin-top: -1/2height;\n\tmargin-left: - 1/2width;\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("（2）定位2：需要有元素宽高限定")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box{\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tmargin:auto;\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("（3）定位3：不需要父有具体宽高限制（兼容性不如上边Ie9+）")]),t._v(" "),e("ul",[e("li",[t._v("可以用transform相对于本体宽高的百分比移动")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box{\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%)\n}\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"display-flex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#display-flex"}},[t._v("#")]),t._v(" display: flex")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("display:flex（ie10+）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".father{\n\tdisplay:flex;\n\tjustify-content: center;\n\talign-items: cneter;\n}\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("js实现就是模拟css写样式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let HTML = document.documentELement,\n\t\twinW = HTML.clientWidth,\n\t\twinH = HTML.clientHeight,\n\t\tboxW = box.offsetWidth,\n\t\tboxH = box.offsetHeight;\nbox.style.position = 'absolute';\nbox.style.left = (winW - boxW) / 2 + 'px';\nbox.style.top = (winH - boxH)/ 2 + 'px'\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("**Element.getBoundingClientRect()**")]),t._v(" 方法返回元素的大小及其相对于视口的位置。")])])]),t._v(" "),e("h4",{attrs:{id:"display-table-cell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#display-table-cell"}},[t._v("#")]),t._v(" display: table-cell")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".father{\n\tdisplay: table-cell;\n\tvertical-align: middle;\n\ttext-align: center;\n\t// 宽高不能是百分比,固定宽高\n\twidth: 500px;\n\theight: 500px;\n}\n.box{\n\tdisplay:inline-block;\n}\n")])])]),e("h3",{attrs:{id:"常规"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常规"}},[t._v("#")]),t._v(" 常规")]),t._v(" "),e("h3",{attrs:{id:"盒子模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#盒子模型"}},[t._v("#")]),t._v(" 盒子模型")]),t._v(" "),e("h4",{attrs:{id:"标准盒模型-content-box"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准盒模型-content-box"}},[t._v("#")]),t._v(" 标准盒模型（content-box）")]),t._v(" "),e("ul",[e("li",[t._v("box-sizing: content-box")]),t._v(" "),e("li",[t._v("width/height=content、padding、border")])]),t._v(" "),e("h4",{attrs:{id:"ie怪异盒模型-border-box"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ie怪异盒模型-border-box"}},[t._v("#")]),t._v(" ie怪异盒模型（border-box）")]),t._v(" "),e("ul",[e("li",[t._v("box-sizing: border-box")]),t._v(" "),e("li",[t._v("怪异盒模型的好处，固定到border控制宽高，不用重新计算padding和border")])]),t._v(" "),e("h4",{attrs:{id:"flex弹性伸缩盒模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex弹性伸缩盒模型"}},[t._v("#")]),t._v(" flex弹性伸缩盒模型")]),t._v(" "),e("ul",[e("li",[t._v("盒子设置display：flex。")]),t._v(" "),e("li",[t._v("main axis X轴")]),t._v(" "),e("li",[t._v("cross axis Y轴")])]),t._v(" "),e("h4",{attrs:{id:"column多列盒模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#column多列盒模型"}},[t._v("#")]),t._v(" column多列盒模型")]),t._v(" "),e("ul",[e("li",[t._v("column-count")])]),t._v(" "),e("h3",{attrs:{id:"几大经典布局方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#几大经典布局方案"}},[t._v("#")]),t._v(" 几大经典布局方案")]),t._v(" "),e("ul",[e("li",[t._v("左右固定，中间自适应")])]),t._v(" "),e("h4",{attrs:{id:"圣杯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#圣杯"}},[t._v("#")]),t._v(" 圣杯")]),t._v(" "),e("ul",[e("li")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<style>\n\thtml,body{\n\t\theight:100&;\n\t\toverflow: hindden;\n\t}\n\t.container{\n\t\theight: 100%;\n\t\tpadding: 0 200px;\n\t}\n\t.left,.right{\n\t\twidth:200px;\n\t\tmin-height:200px;\n\t\tbackgorund: lightblue;\n\t}\n\t.center{\n\t\twidth:100%;\n\t\tmin-height: 400px;\n\t}\n\t.left,.center,.right{\n\t\tfloat:left;\n\t}\n\t.left{\n\t\tmargin-left: -100%;\n\t\tposition: relative;\n\t\tleft: -200px;\n\t}\n\t.right{\n\t\tmargin-right: -200px;\n\t}\n</style>\n<html>\n<body>\n\t<div class="container clearfix">\n\t\t<div class="center"></div>\n\t\t<div class="left"></div>\n\t\t<div class="right"></div>\n\t</div>\n</body>\n</html>\n')])])]),e("h4",{attrs:{id:"双飞翼布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双飞翼布局"}},[t._v("#")]),t._v(" 双飞翼布局")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<style>\n\thtml,body{\n\t\theight:100&;\n\t\toverflow: hindden;\n\t}\n\t.container{\n\t\theight: 100%;\n\t}\n\t.left,.right{\n\t\twidth:200px;\n\t\tmin-height:200px;\n\t\tbackgorund: lightblue;\n\t}\n\t.container .center{\n\t\tmargin: 0 200px;\n\t\tmin-height: 400px;\n\t}\n\t.left,.container,.right{\n\t\tfloat:left;\n\t}\n\t.left{\n\t\tmargin-left: -100%;\n\t}\n\t.right{\n\t\tmargin-right: -200px;\n\t} \n</style>\n<html>\n<body class="clearfix">\n\t<div class="container">\n\t\t<div class="center"></div>\n\t</div>\n\t<div class="left"></div>\n\t<div class="right"></div>\n</body>\n</html>\n')])])]),e("h4",{attrs:{id:"使用calc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用calc"}},[t._v("#")]),t._v(" 使用CALC")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 兼容到IE9\n.center{\n\twidth: calc(100% - 400px);\n\tmin-height:400px;\n}\n")])])]),e("h4",{attrs:{id:"flex布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex布局"}},[t._v("#")]),t._v(" flex布局")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<style>\n\thtml,body{\n\t\theight:100&;\n\t\toverflow: hindden;\n\t}\n\t.container{\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tflex:1;\n\t}\n\t.center{\n\t\tflex:1;\t// 自动分配剩余空间全部\n\t\tmin-height: 400px;\n\t}\n\t .left,.right{\n      height:200px;\n      background:blue;\n      flex:0 0 200px;/* 左右两列固定宽 */ // 放大，缩小，占宽度\n    }\n    .left{\n   \t \torder:-1;/* 让left居于左侧 */\n    }\n</style>\n<html>\n<body>\n\t<div class="container">\n\t\t<div class="left"></div>\n\t\t<div class="center"></div>\n\t\t<div class="right"></div>\n\t</div>\n</body>\n</html>\n')])])]),e("h4",{attrs:{id:"定位"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定位"}},[t._v("#")]),t._v(" 定位")]),t._v(" "),e("h3",{attrs:{id:"flex详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex详解"}},[t._v("#")]),t._v(" flex详解")]),t._v(" "),e("ul",[e("li",[t._v('Flex 是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。')]),t._v(" "),e("li",[t._v("设为 Flex 布局以后，子元素的"),e("code",[t._v("float")]),t._v("、"),e("code",[t._v("clear")]),t._v("和"),e("code",[t._v("vertical-align")]),t._v("属性将失效。")]),t._v(" "),e("li",[t._v('采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。')]),t._v(" "),e("li",[t._v("容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做"),e("code",[t._v("main start")]),t._v("，结束位置叫做"),e("code",[t._v("main end")]),t._v("；交叉轴的开始位置叫做"),e("code",[t._v("cross start")]),t._v("，结束位置叫做"),e("code",[t._v("cross end")]),t._v("。")]),t._v(" "),e("li",[t._v("项目默认沿主轴排列。单个项目占据的主轴空间叫做"),e("code",[t._v("main size")]),t._v("，占据的交叉轴空间叫做"),e("code",[t._v("cross size")]),t._v("。")])]),t._v(" "),e("h4",{attrs:{id:"容器属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器属性"}},[t._v("#")]),t._v(" 容器属性")]),t._v(" "),e("h5",{attrs:{id:"flex-direction属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-direction属性"}},[t._v("#")]),t._v(" flex-direction属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("flex-direction")]),t._v("属性决定主轴的方向（即项目的排列方向）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("row")]),t._v("（默认值）：主轴为水平方向，起点在左端。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("row-reverse")]),t._v("：主轴为水平方向，起点在右端。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("column")]),t._v("：主轴为垂直方向，起点在上沿。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("column-reverse")]),t._v("：主轴为垂直方向，起点在下沿。")])])]),t._v(" "),e("h5",{attrs:{id:"flex-wrap属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-wrap属性"}},[t._v("#")]),t._v(" flex-wrap属性")]),t._v(" "),e("ul",[e("li",[e("p",[t._v('默认情况下，项目都排在一条线（又称"轴线"）上。'),e("code",[t._v("flex-wrap")]),t._v("属性定义，如果一条轴线排不下，如何换行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("（1）"),e("code",[t._v("nowrap")]),t._v("（默认）：不换行。")])]),t._v(" "),e("li",[e("p",[t._v("（2）"),e("code",[t._v("wrap")]),t._v("：换行，第一行在上方。")])]),t._v(" "),e("li",[e("p",[t._v("（3）"),e("code",[t._v("wrap-reverse")]),t._v("：换行，第一行在下方。")])])]),t._v(" "),e("h5",{attrs:{id:"flex-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-flow"}},[t._v("#")]),t._v(" flex-flow")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("flex-flow")]),t._v("属性是"),e("code",[t._v("flex-direction")]),t._v("属性和"),e("code",[t._v("flex-wrap")]),t._v("属性的简写形式，默认值为"),e("code",[t._v("row nowrap")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n")])])])])]),t._v(" "),e("h5",{attrs:{id:"justify-content属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#justify-content属性"}},[t._v("#")]),t._v(" justify-content属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("justify-content")]),t._v("属性定义了项目在主轴上的对齐方式。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("flex-start")]),t._v("（默认值）：左对齐")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("flex-end")]),t._v("：右对齐")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("center")]),t._v("： 居中")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("space-between")]),t._v("：两端对齐，项目之间的间隔都相等。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("space-around")]),t._v("：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。")])])]),t._v(" "),e("h5",{attrs:{id:"align-items属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#align-items属性"}},[t._v("#")]),t._v(" align-items属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("align-items")]),t._v("属性定义项目在交叉轴上如何对齐。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("flex-start")]),t._v("：交叉轴的起点对齐。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("flex-end")]),t._v("：交叉轴的终点对齐。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("center")]),t._v("：交叉轴的中点对齐。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("baseline")]),t._v(": 项目的第一行文字的基线对齐。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("stretch")]),t._v("（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。")])])]),t._v(" "),e("h5",{attrs:{id:"align-content属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#align-content属性"}},[t._v("#")]),t._v(" align-content属性")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("align-content")]),t._v("属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n")])])]),e("ul",[e("li",[e("code",[t._v("flex-start")]),t._v("：与交叉轴的起点对齐。")]),t._v(" "),e("li",[e("code",[t._v("flex-end")]),t._v("：与交叉轴的终点对齐。")]),t._v(" "),e("li",[e("code",[t._v("center")]),t._v("：与交叉轴的中点对齐。")]),t._v(" "),e("li",[e("code",[t._v("space-between")]),t._v("：与交叉轴两端对齐，轴线之间的间隔平均分布。")]),t._v(" "),e("li",[e("code",[t._v("space-around")]),t._v("：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。")]),t._v(" "),e("li",[e("code",[t._v("stretch")]),t._v("（默认值）：轴线占满整个交叉轴。")])]),t._v(" "),e("h3",{attrs:{id:"项目的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目的属性"}},[t._v("#")]),t._v(" 项目的属性")]),t._v(" "),e("h5",{attrs:{id:"order属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#order属性"}},[t._v("#")]),t._v(" order属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("order")]),t._v("属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".item {\n  order: <integer>;\n}\n")])])])])]),t._v(" "),e("h5",{attrs:{id:"flex-grow属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-grow属性"}},[t._v("#")]),t._v(" flex-grow属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("flex-grow")]),t._v("属性定义项目的放大比例，默认为"),e("code",[t._v("0")]),t._v("，即如果存在剩余空间，也不放大。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".item {\n  flex-grow: <number>; /* default 0 */\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("如果所有项目的"),e("code",[t._v("flex-grow")]),t._v("属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的"),e("code",[t._v("flex-grow")]),t._v("属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。")])])]),t._v(" "),e("h5",{attrs:{id:"flex-shrink属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-shrink属性"}},[t._v("#")]),t._v(" flex-shrink属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("flex-shrink")]),t._v("属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".item {\n  flex-shrink: <number>; /* default 1 */\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("如果所有项目的"),e("code",[t._v("flex-shrink")]),t._v("属性都为1，当空间不足时，都将等比例缩小。如果一个项目的"),e("code",[t._v("flex-shrink")]),t._v("属性为0，其他项目都为1，则空间不足时，前者不缩小。")])]),t._v(" "),e("li",[e("p",[t._v("负值对该属性无效。")])])]),t._v(" "),e("h5",{attrs:{id:"flex-basis属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis属性"}},[t._v("#")]),t._v(" flex-basis属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("flex-basis")]),t._v("属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为"),e("code",[t._v("auto")]),t._v("，即项目的本来大小。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".item {\n  flex-basis: <length> | auto; /* default auto */\n}\n")])])])])]),t._v(" "),e("h5",{attrs:{id:"flex属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex属性"}},[t._v("#")]),t._v(" flex属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("flex")]),t._v("属性是"),e("code",[t._v("flex-grow")]),t._v(", "),e("code",[t._v("flex-shrink")]),t._v(" 和 "),e("code",[t._v("flex-basis")]),t._v("的简写，默认值为"),e("code",[t._v("0 1 auto")]),t._v("。后两个属性可选。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("该属性有两个快捷值："),e("code",[t._v("auto")]),t._v(" ("),e("code",[t._v("1 1 auto")]),t._v(") 和 none ("),e("code",[t._v("0 0 auto")]),t._v(")。")])]),t._v(" "),e("li",[e("p",[t._v("建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。")])])]),t._v(" "),e("h5",{attrs:{id:"align-self属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#align-self属性"}},[t._v("#")]),t._v(" align-self属性")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("align-self")]),t._v("属性允许单个项目有与其他项目不一样的对齐方式，可覆盖"),e("code",[t._v("align-items")]),t._v("属性。默认值为"),e("code",[t._v("auto")]),t._v("，表示继承父元素的"),e("code",[t._v("align-items")]),t._v("属性，如果没有父元素，则等同于"),e("code",[t._v("stretch")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("该属性可能取6个值，除了auto，其他都与align-items属性完全一致。")])])]),t._v(" "),e("h3",{attrs:{id:"响应式布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应式布局"}},[t._v("#")]),t._v(" 响应式布局")]),t._v(" "),e("h4",{attrs:{id:"移动端响应式布局开发的三大方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端响应式布局开发的三大方案"}},[t._v("#")]),t._v(" 移动端响应式布局开发的三大方案")]),t._v(" "),e("h5",{attrs:{id:"media"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#media"}},[t._v("#")]),t._v(" media")]),t._v(" "),e("ul",[e("li",[t._v("媒体查询（一套）")])]),t._v(" "),e("h5",{attrs:{id:"rem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rem"}},[t._v("#")]),t._v(" rem")]),t._v(" "),e("ul",[e("li",[t._v("（应用于两套 中的移动端）")])]),t._v(" "),e("h5",{attrs:{id:"flex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex"}},[t._v("#")]),t._v(" flex")]),t._v(" "),e("h5",{attrs:{id:"vh-vw"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vh-vw"}},[t._v("#")]),t._v(" vh/vw")]),t._v(" "),e("ul",[e("li",[t._v("百分比布局")])]),t._v(" "),e("h3",{attrs:{id:"动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动画"}},[t._v("#")]),t._v(" 动画")]),t._v(" "),e("h1",{attrs:{id:"js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[t._v("#")]),t._v(" js")]),t._v(" "),e("h2",{attrs:{id:"堆栈内存及闭包作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆栈内存及闭包作用域"}},[t._v("#")]),t._v(" 堆栈内存及闭包作用域")]),t._v(" "),e("h3",{attrs:{id:"js的数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js的数据类型"}},[t._v("#")]),t._v(" JS的数据类型")]),t._v(" "),e("h4",{attrs:{id:"基本数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("boolean")])]),t._v(" "),e("li",[e("p",[t._v("null")])]),t._v(" "),e("li",[e("p",[t._v("undefined")])]),t._v(" "),e("li",[e("p",[t._v("number")])]),t._v(" "),e("li",[e("p",[t._v("string")])]),t._v(" "),e("li",[e("p",[t._v("symbol")])]),t._v(" "),e("li",[e("p",[t._v("bigint")])]),t._v(" "),e("li",[e("p",[t._v("举例：Symbol的作用")])])]),t._v(" "),e("h4",{attrs:{id:"bigint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),e("h5",{attrs:{id:"什么是bigint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是bigint"}},[t._v("#")]),t._v(" 什么是BigInt")]),t._v(" "),e("ul",[e("li",[t._v("BigInt是一种新的数据类型，用于当整数值大于Number数据类型支持的范围时。这种数据类型允许我们安全地对"),e("code",[t._v("大整数")]),t._v("执行算术操作，表示高分辨率的时间戳，使用大整数id，等等，而不需要使用库。")])]),t._v(" "),e("h5",{attrs:{id:"为什么需要bigint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要bigint"}},[t._v("#")]),t._v(" 为什么需要BigInt")]),t._v(" "),e("ul",[e("li",[t._v("JS中的Number无法精确表示非常大的整数，它会将非常大的整数四舍五入，确切地说，JS中的Number类型只能安全地表示-9007199254740991(-(2^53-1))和9007199254740991（(2^53-1)），任何超出此范围的整数值都可能失去精度。")])]),t._v(" "),e("h5",{attrs:{id:"如何创建并使用bigint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何创建并使用bigint"}},[t._v("#")]),t._v(" 如何创建并使用BigInt？")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("要创建BigInt，只需要在数字末尾追加n即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("console.log( 9007199254740995n );    // → 9007199254740995n\t\nconsole.log( 9007199254740995 );     // → 9007199254740996\n")])])])]),t._v(" "),e("li",[e("p",[t._v("另一种创建BigInt的方法是用BigInt()构造函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('BigInt("9007199254740995");    // → 9007199254740995n\n')])])])])]),t._v(" "),e("h5",{attrs:{id:"值得警惕的点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#值得警惕的点"}},[t._v("#")]),t._v(" 值得警惕的点")]),t._v(" "),e("ul",[e("li",[t._v("BigInt不支持一元加号运算符, 这可能是某些程序可能依赖于 + 始终生成 Number 的不变量，或者抛出异常。另外，更改 + 的行为也会破坏 asm.js代码。")]),t._v(" "),e("li",[t._v("因为隐式类型转换可能丢失信息，所以不允许在bigint和 Number 之间进行混合操作。当混合使用大整数和浮点数时，结果值可能无法由BigInt或Number精确表示。")]),t._v(" "),e("li",[t._v("不能将BigInt传递给Web api和内置的 JS 函数，这些函数需要一个 Number 类型的数字。尝试这样做会报TypeError错误。")]),t._v(" "),e("li",[t._v("当 Boolean 类型与 BigInt 类型相遇时，BigInt的处理方式与Number类似，换句话说，只要不是0n，BigInt就被视为truthy的值。")]),t._v(" "),e("li",[t._v("元素都为BigInt的数组可以进行sort。")]),t._v(" "),e("li",[t._v("BigInt可以正常地进行位运算，如|、&、<<、>>和^")])]),t._v(" "),e("h5",{attrs:{id:"浏览器兼容性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),e("ul",[e("li",[t._v("其实现在的兼容性并不怎么好，只有chrome67、firefox、Opera这些主流实现，要正式成为规范，其实还有很长的路要走。")])]),t._v(" "),e("h4",{attrs:{id:"引用数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),e("ul",[e("li",[t._v("对象Object（包含普通对象-Object，数组对象-Array，正则对象-RegExp，日期对象-Date，数学函数-Math，函数对象-Function）")]),t._v(" "),e("li",[t._v("引用类型是为了让内存公用空间")])]),t._v(" "),e("h4",{attrs:{id:"基本包装类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型"}},[t._v("#")]),t._v(" 基本包装类型")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("基本数据类型，包括Boolean, Number和String。")])]),t._v(" "),e("li",[e("p",[t._v("装箱")]),t._v(" "),e("ul",[e("li",[t._v("第一步:创建Object类实例。注意为什么不是String ？ 由于Symbol和BigInt的出现，对它们调用new都会报错，目前ES6规范也不建议用new来创建基本类型的包装类。")]),t._v(" "),e("li",[t._v("第二步: 调用实例方法。")]),t._v(" "),e("li",[t._v("第三步: 执行完方法立即销毁这个实例。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("（1）创建String类型的一个实例；\n（2）在实例上调用指定的方法；\n（3）销毁这个实例；\n'1'.toString() // =>\nvar s = new Object('1');\ns.toString();\ns = null;\n")])])])]),t._v(" "),e("li",[e("p",[t._v("拆箱")]),t._v(" "),e("ul",[e("li",[t._v("将引用类型对象转换为对应的值类型对象，它是通过引用类型的valueOf()或者toString()方法来实现的。如果是自定义的对象，你也可以自定义它的valueOf()/tostring()方法，实现对这个对象的拆箱。")])])])]),t._v(" "),e("h4",{attrs:{id:"内置函数-数据封装类对象-构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内置函数-数据封装类对象-构造函数"}},[t._v("#")]),t._v(" 内置函数---数据封装类对象（构造函数）")]),t._v(" "),e("ul",[e("li",[t._v("Object")]),t._v(" "),e("li",[t._v("Array")]),t._v(" "),e("li",[t._v("Boolean")]),t._v(" "),e("li",[t._v("Number")]),t._v(" "),e("li",[t._v("String")]),t._v(" "),e("li",[t._v("Function")]),t._v(" "),e("li",[t._v("Date")]),t._v(" "),e("li",[t._v("RegExp")]),t._v(" "),e("li",[t._v("Error")])]),t._v(" "),e("h4",{attrs:{id:"_8种数据类型及区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8种数据类型及区别"}},[t._v("#")]),t._v(" 8种数据类型及区别")]),t._v(" "),e("h4",{attrs:{id:"null"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" null")]),t._v(" "),e("ul",[e("li",[t._v("null不是对象")]),t._v(" "),e("li",[t._v("虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object 。")])]),t._v(" "),e("h3",{attrs:{id:"判断变量的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断变量的类型"}},[t._v("#")]),t._v(" 判断变量的类型")]),t._v(" "),e("h4",{attrs:{id:"typeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("对于原始类型来说，除了 null 都可以调用typeof显示正确的类型。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("typeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\n")])])])]),t._v(" "),e("li",[e("p",[t._v('但对于引用数据类型，除了函数之外，都会显示"object"。')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("typeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n")])])])]),t._v(" "),e("li",[e("p",[t._v("Object.toString().call()及原理[[class]] 可以输出对象的内部属性[[class]]")])]),t._v(" "),e("li",[e("p",[t._v("举例： typeof null // ’object‘ 、判断数组的方法、判断空对象的方法")])])]),t._v(" "),e("h4",{attrs:{id:"instanceof及原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof及原理"}},[t._v("#")]),t._v(" instanceof及原理")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[e("code",[t._v("instanceof")])]),t._v(" "),e("strong",[t._v("运算符")]),t._v("用于检测构造函数的 "),e("code",[t._v("prototype")]),t._v(" 属性是否出现在某个实例对象的原型链")])]),t._v(" "),e("li",[e("p",[t._v("instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const Person = function() {}\nconst p1 = new Person()\np1 instanceof Person // true\n\nvar str1 = 'hello world'\nstr1 instanceof String // false\n\nvar str2 = new String('hello world')\nstr2 instanceof String // true\n\n// 判断基本数据类型\n// 其实就是自定义instanceof行为的一种方式，这里将原有的instanceof方法重定义，换成了typeof，因此能够判断基本数据类型。\nclass PrimitiveNumber {\n  static [Symbol.hasInstance](x) {\n    return typeof x === 'number'\n  }\n}\nconsole.log(111 instanceof PrimitiveNumber) // true\n\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"手动实现instanceof的功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动实现instanceof的功能"}},[t._v("#")]),t._v(" 手动实现instanceof的功能")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("核心: 原型链的向上查找。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function myInstanceof(left, right) {\n    //基本数据类型直接返回false\n    if(typeof left !== \'object\' || left === null) return false;\n    //getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象\n    let proto = Object.getPrototypeOf(left);\n    while(true) {\n        //查找到尽头，还没找到\n        if(proto == null) return false;\n        //找到相同的原型对象\n        if(proto == right.prototype) return true;\n        proto = Object.getPrototypeOf(proto);\n    }\n}\nconsole.log(myInstanceof("111", String)); //false\nconsole.log(myInstanceof(new String("111"), String));//true\n')])])])])]),t._v(" "),e("h4",{attrs:{id:"object-is和-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-is和-的区别"}},[t._v("#")]),t._v(" Object.is和===的区别")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("**Object.is()**")]),t._v(" 方法判断两个值是否是"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness",target:"_blank",rel:"noopener noreferrer"}},[t._v("相同的值"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("li",[t._v("这种相等性判断逻辑和传统的 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("==")]),e("OutboundLink")],1),t._v(" 运算不同，"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("==")]),e("OutboundLink")],1),t._v(" 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 "),e("code",[t._v('"" == false')]),t._v(" 等于 "),e("code",[t._v("true")]),t._v(" 的现象），但 "),e("code",[t._v("Object.is")]),t._v(" 不会做这种类型转换。")]),t._v(" "),e("li",[t._v("这与 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("===")]),e("OutboundLink")],1),t._v(" 运算符的判定方式也不一样。"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("===")]),e("OutboundLink")],1),t._v(" 运算符（和"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("==")]),e("OutboundLink")],1),t._v(" 运算符）将数字值 "),e("code",[t._v("-0")]),t._v(" 和 "),e("code",[t._v("+0")]),t._v(" 视为相等，并认为 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Number.NaN")]),e("OutboundLink")],1),t._v(" 不等于 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("NaN")]),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("li",[t._v("Object在严格等于的基础上修复了一些特殊情况下的失误，具体来说就是+0和-0，NaN和NaN。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function is(x, y) {\n  if (x === y) {\n    //运行到1/x === 1/y的时候x和y都为0，但是1/+0 = +Infinity， 1/-0 = -Infinity, 是不一样的\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    //NaN===NaN是false,这是不对的，我们在这里做一个拦截，x !== x，那么一定是 NaN, y 同理\n    //两个都是NaN的时候返回true\n    return x !== x && y !== y;\n  }\n")])])]),e("h3",{attrs:{id:"数据类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),e("ul",[e("li",[t._v("强制类型和隐式类型转换")])]),t._v(" "),e("h4",{attrs:{id:"类型转换只有三种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换只有三种"}},[t._v("#")]),t._v(" 类型转换只有三种")]),t._v(" "),e("ul",[e("li",[t._v("转换成数字")]),t._v(" "),e("li",[t._v("转换成布尔值")]),t._v(" "),e("li",[t._v("转换成字符串")])]),t._v(" "),e("h4",{attrs:{id:"数据转换规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据转换规则"}},[t._v("#")]),t._v(" 数据转换规则")]),t._v(" "),e("ul",[e("li",[t._v("对象 == 字符串，对象toString()变为字符串（对象变为数字=> 先对象.toString(),再Number('字符串'))")]),t._v(" "),e("li",[t._v("null == undefined 相等，但是和其他值比较就不在相等了")]),t._v(" "),e("li",[t._v("NaN == NaN不相等")]),t._v(" "),e("li",[t._v("剩下的都转换为数字")])]),t._v(" "),e("h4",{attrs:{id:"相等-和全等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相等-和全等"}},[t._v("#")]),t._v(" 相等== 和全等 ===")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("===叫做严格相等，是指：左右两边不仅值要相等，类型也要相等，例如'1'===1的结果是false，因为一边是string，另一边是number。")])]),t._v(" "),e("li",[e("p",[t._v("两边的类型是否相同，相同的话就比较值的大小，例如1==2，返回false")])]),t._v(" "),e("li",[e("p",[t._v("判断的是否是null和undefined，是的话就返回true")])]),t._v(" "),e("li",[e("p",[t._v("判断的类型是否是String和Number，是的话，把String类型转换成Number，再进行比较")])]),t._v(" "),e("li",[e("p",[t._v("判断其中一方是否是Boolean，是的话就把Boolean转换成Number，再进行比较")])]),t._v(" "),e("li",[e("p",[t._v("如果其中一方为Object，且另一方为String、Number或者Symbol，会将Object转换成字符串，再进行比较")])]),t._v(" "),e("li",[e("h3",{attrs:{id:"结果是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结果是什么"}},[t._v("#")]),t._v(" [] == ![]结果是什么")]),t._v(" "),e("ul",[e("li",[t._v("== 中，左右两边都需要转换为数字然后进行比较。")]),t._v(" "),e("li",[t._v("[]转换为数字为0。")]),t._v(" "),e("li",[t._v("![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true,")]),t._v(" "),e("li",[t._v("因此![]为false，进而在转换成数字，变为0。")]),t._v(" "),e("li",[t._v("0 == 0 ， 结果为true")])])])]),t._v(" "),e("h4",{attrs:{id:"对象转原始类型是根据什么流程运行的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转原始类型是根据什么流程运行的"}},[t._v("#")]),t._v(" 对象转原始类型是根据什么流程运行的")]),t._v(" "),e("ul",[e("li",[t._v("对象转原始类型，会调用内置的[ToPrimitive]函数，对于该函数而言，其逻辑如下：\n"),e("ul",[e("li",[t._v("如果Symbol.toPrimitive()方法，优先调用再返回")]),t._v(" "),e("li",[t._v("调用valueOf()，如果转换为原始类型，则返回")]),t._v(" "),e("li",[t._v("调用toString()，如果转换为原始类型，则返回")]),t._v(" "),e("li",[t._v("如果都没有返回原始类型，会报错")])])])]),t._v(" "),e("h4",{attrs:{id:"如何让if-a-1-a-2-条件成立"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何让if-a-1-a-2-条件成立"}},[t._v("#")]),t._v(" 如何让if(a == 1 && a == 2)条件成立")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 先调用valueOf然后toString\nvar a = {\n\ti: 0,\n\ttoString(){\n\t\treturn ++this.i\n\t}\n}\nvar a = {\n  value: 0,\n  valueOf: function() {\n    this.value++;\n    return this.value;\n  }\n};\n// 用defineProperty,数据劫持\nvar i = 0 // 不能用a会死循环，栈溢出，\n// GETER拦截器中不能再次获取当前属性\nObject.defineProperty(window, 'a',{\n\tget(){\n\t\treturn ++i\n\t}\n})\n// 也是变成字符串重写toSting\nvar a = [1,2,3]\na.toString = a.shift\nconsole.log(a == 1 && a == 2);//true\n")])])]),e("h3",{attrs:{id:"运算符优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[t._v("#")]),t._v(" 运算符优先级")]),t._v(" "),e("h3",{attrs:{id:"堆栈内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆栈内存"}},[t._v("#")]),t._v(" 堆栈内存")]),t._v(" "),e("h4",{attrs:{id:"堆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),e("ul",[e("li",[t._v("存储引用类型值的空间")])]),t._v(" "),e("h4",{attrs:{id:"栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),e("ul",[e("li",[t._v("存储基本类型值和指定代码的环境")])]),t._v(" "),e("h3",{attrs:{id:"js堆栈内存的运行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js堆栈内存的运行机制"}},[t._v("#")]),t._v(" JS堆栈内存的运行机制")]),t._v(" "),e("h3",{attrs:{id:"执行上下文和执行栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文和执行栈"}},[t._v("#")]),t._v(" 执行上下文和执行栈")]),t._v(" "),e("h4",{attrs:{id:"执行上下文的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的类型"}},[t._v("#")]),t._v(" 执行上下文的类型")]),t._v(" "),e("ul",[e("li",[t._v("全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。")]),t._v(" "),e("li",[t._v("函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。")]),t._v(" "),e("li",[t._v("Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用。")])]),t._v(" "),e("h4",{attrs:{id:"执行栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),e("ul",[e("li",[t._v("执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。")]),t._v(" "),e("li",[t._v("首次运行JS代码时，会创建一个"),e("strong",[t._v("全局")]),t._v("执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个"),e("strong",[t._v("新的函数")]),t._v("执行上下文并Push到当前执行栈的栈顶。")]),t._v(" "),e("li",[t._v("根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的"),e("strong",[t._v("函数")]),t._v("执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的"),e("strong",[t._v("下一个")]),t._v("执行上下文。")])]),t._v(" "),e("h4",{attrs:{id:"执行上下文的创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的创建"}},[t._v("#")]),t._v(" 执行上下文的创建")]),t._v(" "),e("h5",{attrs:{id:"创建阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),e("ul",[e("li",[t._v("1、确定 "),e("strong",[t._v("this")]),t._v(" 的值，也被称为 "),e("strong",[t._v("This Binding")]),t._v("。")]),t._v(" "),e("li",[t._v("2、"),e("strong",[t._v("LexicalEnvironment（词法环境）")]),t._v(" 组件被创建。\n"),e("ul",[e("li",[e("strong",[t._v("全局环境")]),t._v("：是一个没有外部环境的词法环境，其外部环境引用为 "),e("strong",[t._v("null")]),t._v("。拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，"),e("code",[t._v("this")]),t._v(" 的值指向这个全局对象。")]),t._v(" "),e("li",[e("strong",[t._v("函数环境")]),t._v("：用户在函数中定义的变量被存储在"),e("strong",[t._v("环境记录")]),t._v("中，包含了"),e("code",[t._v("arguments")]),t._v(" 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。")])])]),t._v(" "),e("li",[t._v("3、"),e("strong",[t._v("VariableEnvironment（变量环境）")]),t._v(" 组件被创建。\n"),e("ul",[e("li",[t._v("变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。")]),t._v(" "),e("li",[t._v("在 ES6 中，"),e("strong",[t._v("词法")]),t._v(" 环境和 "),e("strong",[t._v("变量")]),t._v(" 环境的区别在于前者用于存储**函数声明和变量（ "),e("code",[t._v("let")]),t._v(" 和 "),e("code",[t._v("const")]),t._v(" ）"),e("strong",[t._v("绑定，而后者仅用于存储")]),t._v("变量（ "),e("code",[t._v("var")]),t._v(" ）**绑定。")])])])]),t._v(" "),e("h5",{attrs:{id:"执行阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),e("ul",[e("li",[t._v("此阶段，完成对所有变量的分配，最后执行代码。")]),t._v(" "),e("li",[t._v("如果 Javascript 引擎在源代码中声明的实际位置找不到 "),e("code",[t._v("let")]),t._v(" 变量的值，那么将为其分配 "),e("code",[t._v("undefined")]),t._v(" 值。")])]),t._v(" "),e("h3",{attrs:{id:"函数创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数创建"}},[t._v("#")]),t._v(" 函数创建")]),t._v(" "),e("h4",{attrs:{id:"创建函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建函数"}},[t._v("#")]),t._v(" 创建函数")]),t._v(" "),e("ul",[e("li",[t._v("开辟一个堆内存")]),t._v(" "),e("li",[t._v("把函数体中的代码当作字符串存储进去")]),t._v(" "),e("li",[t._v("把堆内存的地址赋值给函数名/变量名")]),t._v(" "),e("li",[e("strong",[t._v("函数在哪里创建，那么它执行时候所需要查找的上级作用域就是谁")])])]),t._v(" "),e("h4",{attrs:{id:"函数执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数执行"}},[t._v("#")]),t._v(" 函数执行")]),t._v(" "),e("ul",[e("li",[t._v("形成一个全新的私有作用域、执行上下文、私有栈内存（执行一次形成一个，多个之间也不会产生影响）")]),t._v(" "),e("li",[t._v("形参赋值&变量提升")]),t._v(" "),e("li",[t._v("代码执行（把所属堆内存中的代码字符串拿出来一行行执行）")]),t._v(" "),e("li",[e("strong",[t._v("遇到一个变量，首先看它是否为私有变量（形参和在私有作用域中声明的变量是私有变量），是私有的就操作自己的变量即可，不是私有的则向上级作用域中查找...一直找到全局作用域为止 => 作用域链查找机制")])]),t._v(" "),e("li",[t._v("私有变量和外界的变量没有必然关系，可以理解为被私有栈内存保护起来了，这种机制其实就是"),e("strong",[t._v("闭包的保护机制")])])]),t._v(" "),e("h3",{attrs:{id:"变量提升机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量提升机制"}},[t._v("#")]),t._v(" 变量提升机制")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("变量提升")]),t._v("的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 "),e("code",[t._v("undefined")]),t._v("（在 "),e("code",[t._v("var")]),t._v(" 的情况下）或保持未初始化（在 "),e("code",[t._v("let")]),t._v(" 和 "),e("code",[t._v("const")]),t._v(" 的情况下）。所以这就是为什么可以在声明之前访问 "),e("code",[t._v("var")]),t._v(" 定义的变量（尽管是 "),e("code",[t._v("undefined")]),t._v(" ），但如果在声明之前访问 "),e("code",[t._v("let")]),t._v(" 和 "),e("code",[t._v("const")]),t._v(" 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。")])]),t._v(" "),e("li",[e("p",[t._v("js引擎在代码正式执行之前会做一个预处理的工作：")]),t._v(" "),e("ul",[e("li",[t._v("1、收集变量")]),t._v(" "),e("li",[t._v("2、收集函数")]),t._v(" "),e("li",[t._v("依据：\n"),e("ul",[e("li",[t._v("var 将var后边的变量定义但是不赋值 var a= undefined")]),t._v(" "),e("li",[t._v("function(){} 提前定义该函数")])])])])]),t._v(" "),e("li",[e("p",[t._v("let/const声明的变量，仍然会提前被收集到变量对象中，但和var不同的是，let/const定义的变量，不会在这个时候给他赋值undefined。")])]),t._v(" "),e("li",[e("p",[t._v("因为完全没有赋值，即使变量提升了，我们也不能在赋值之前调用他。这就是我们常说的"),e("strong",[t._v("暂时性死区")]),t._v("。")])])]),t._v(" "),e("h3",{attrs:{id:"作用域ao-vo-go-ec-ecstack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域ao-vo-go-ec-ecstack"}},[t._v("#")]),t._v(" 作用域AO/VO/GO/EC/ECSTACK")]),t._v(" "),e("ul",[e("li",[t._v("作用域是在代码定义的时候产生的")]),t._v(" "),e("li",[t._v("作用域表示的是一个变量的可用范围、其实它是一个保存变量的对象")]),t._v(" "),e("li",[t._v("活动对象AO（Activation Object）")])]),t._v(" "),e("h4",{attrs:{id:"_1、全局作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、全局作用域"}},[t._v("#")]),t._v(" "),e("strong",[t._v("1、全局作用域")])]),t._v(" "),e("ul",[e("li",[t._v("在JavaScript中的全局作用域其实就是windows")]),t._v(" "),e("li",[t._v("优点：可重复使用，随处可用")]),t._v(" "),e("li",[t._v("缺点：会造成全局污染")])]),t._v(" "),e("h4",{attrs:{id:"_2、函数作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、函数作用域"}},[t._v("#")]),t._v(" "),e("strong",[t._v("2、函数作用域")])]),t._v(" "),e("ul",[e("li",[t._v("临时创建的活动对象AO（Activation Object）、该对象包含了函数的所有局部变量、命名参数、参数集合以及this，"),e("strong",[t._v("当运行时上下文被销毁、活动也会被销毁（闭包形成的原因其实因为就是因为活动对象被引用着无法被销毁而导致的，详细的请继续往下看）")])]),t._v(" "),e("li",[t._v("优点：不污染全局")]),t._v(" "),e("li",[t._v("缺点：不可重复使用、仅在函数内可以使用")])]),t._v(" "),e("h3",{attrs:{id:"变量对象-variable-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量对象-variable-object"}},[t._v("#")]),t._v(" 变量对象（Variable Object）")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("变量对象的创建，依次经历了以下几个过程。")])]),t._v(" "),e("li",[e("p",[t._v("1、建立arguments对象。检查当前上下文中的参数，建立该对象下的属性与属性值。")])]),t._v(" "),e("li",[e("p",[t._v("2、检查当前上下文的函数声明，也就是使用function关键字声明的函数。在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用。如果函数名的属性已经存在，那么该属性将会被新的引用所覆盖。")])]),t._v(" "),e("li",[e("p",[t._v("3、检查当前上下文中的变量声明，每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为undefined。如果该变量名的属性已经存在，为了防止同名的函数被修改为undefined，则会直接跳过，原属性值不会被修改。")])])]),t._v(" "),e("h3",{attrs:{id:"vo与ao的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vo与ao的区别"}},[t._v("#")]),t._v(" VO与AO的区别")]),t._v(" "),e("ul",[e("li",[t._v("变量对象和活动对象有什么区别，他们其实都是同一个对象，只是处于执行上下文的不同生命周期。")]),t._v(" "),e("li",[t._v("VO 为 Variable Object的缩写，即变量对象，在函数创建阶段。")]),t._v(" "),e("li",[t._v("AO为Active Object的缩写，即活动对象，在函数的执行阶段。")]),t._v(" "),e("li",[t._v("1、变量对象（"),e("strong",[t._v("VO")]),t._v("）是规范上或者是JS引擎上实现的，并不能在JS环境中直接访问。")]),t._v(" "),e("li",[t._v("2、当进入到一个执行上下文后，这个变量对象才会被"),e("strong",[t._v("激活")]),t._v("，所以叫活动对象（"),e("strong",[t._v("AO")]),t._v("），这时候活动对象上的各种属性才能被访问。")])]),t._v(" "),e("h3",{attrs:{id:"作用域链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),e("ul",[e("li",[t._v("作用域链的概念，在ES5中只存在两种作用域————全局作用域和函数作用域，"),e("code",[t._v("当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链")])]),t._v(" "),e("li",[t._v("值得注意的是，每一个子函数都会拷贝上级的作用域，形成一个作用域的链条。")])]),t._v(" "),e("h3",{attrs:{id:"执行上下文ecstack-execution-context-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文ecstack-execution-context-stack"}},[t._v("#")]),t._v(" 执行上下文ECSTACK（Execution Context Stack）")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("理解：代码执行的环境")])]),t._v(" "),e("li",[e("p",[t._v("时机： 代码正式执行之前会进入到执行环境")])]),t._v(" "),e("li",[e("p",[t._v("工作：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1、创建变量对象")]),t._v(" "),e("ul",[e("li",[t._v("变量")]),t._v(" "),e("li",[t._v("函数及函数的参数")]),t._v(" "),e("li",[t._v("全局：winodw")]),t._v(" "),e("li",[t._v("局部：抽象但是确实存在")])])]),t._v(" "),e("li",[e("p",[t._v("2、确认this的指向")]),t._v(" "),e("ul",[e("li",[t._v("全局：this\twindow")]),t._v(" "),e("li",[t._v("局部：this   调用其的对象")])])]),t._v(" "),e("li",[e("p",[t._v("3、创建作用域链")])])])]),t._v(" "),e("li",[e("p",[t._v("父级作用域链+ 当前的变量对象")])]),t._v(" "),e("li",[e("p",[t._v("4、扩展：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ECObj={\n\t变量对象:{变量，函数，函数的形参}，\n\tscopeChain: 父级作用域链 + 当前的变量对象，\n\tthis: { window || 调用其的对象}\n}\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"创建阶段-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段-2"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在这个阶段中，执行上下文会分别创建变量对象，建立作用域链，以及确定this的指向")])]),t._v(" "),e("li",[e("p",[t._v("作用域链（当前变量对象+所有父级变量对象）")])]),t._v(" "),e("li",[e("p",[t._v("变量对象（参数、变量、函数声明）")])]),t._v(" "),e("li",[e("p",[t._v("this")])])]),t._v(" "),e("h4",{attrs:{id:"执行阶段-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段-2"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),e("ul",[e("li",[t._v("创建完成之后，就会开始执行代码，这个时候，会完成变量赋值，函数引用，以及执行其他代码。")]),t._v(" "),e("li",[t._v("变量赋值")]),t._v(" "),e("li",[t._v("函数引用")]),t._v(" "),e("li",[t._v("执行其他代码")])]),t._v(" "),e("h4",{attrs:{id:"执行完毕后出栈-等待被回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行完毕后出栈-等待被回收"}},[t._v("#")]),t._v(" 执行完毕后出栈，等待被回收")]),t._v(" "),e("h3",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),e("h4",{attrs:{id:"什么是闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[t._v("#")]),t._v(" 什么是闭包")]),t._v(" "),e("ul",[e("li",[t._v("红宝书(p178)上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数，\n"),e("ul",[e("li",[t._v("是一个函数")]),t._v(" "),e("li",[t._v("能访问另外一个函数作用域中的变量")])])]),t._v(" "),e("li",[t._v("MDN 对闭包的定义为：闭包是指那些能够访问自由变量的函数。 （其中自由变量，指在函数中使用的，但既不是函数参数arguments也不是函数的局部变量的变量，其实就是另外一个函数作用域中的变量。）")]),t._v(" "),e("li",[t._v("密闭的容器，类似于set，map容器，存储数据的")]),t._v(" "),e("li",[t._v("闭包是一个对象，存放数据的格式：key：value")])]),t._v(" "),e("h4",{attrs:{id:"闭包形成的条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包形成的条件"}},[t._v("#")]),t._v(" 闭包形成的条件")]),t._v(" "),e("ul",[e("li",[t._v("函数嵌套")]),t._v(" "),e("li",[t._v("内部函数引用外部函数的局部变量")])]),t._v(" "),e("h4",{attrs:{id:"闭包产生的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包产生的原因"}},[t._v("#")]),t._v(" 闭包产生的原因")]),t._v(" "),e("ul",[e("li",[t._v("闭包产生的本质就是，当前环境中存在指向父级作用域的引用。")])]),t._v(" "),e("h4",{attrs:{id:"闭包的两大作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包的两大作用"}},[t._v("#")]),t._v(" 闭包的两大作用：")]),t._v(" "),e("ul",[e("li",[t._v("保存")]),t._v(" "),e("li",[t._v("保护")])]),t._v(" "),e("h4",{attrs:{id:"闭包及优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包及优缺点"}},[t._v("#")]),t._v(" 闭包及优缺点")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("闭包的概念和优缺点")])]),t._v(" "),e("li",[e("p",[t._v("优点")])]),t._v(" "),e("li",[e("p",[t._v("延长外部函数局部变量的生命周期")])]),t._v(" "),e("li",[e("p",[t._v("缺点：")]),t._v(" "),e("ul",[e("li",[t._v("容易造成内存泄漏")])])]),t._v(" "),e("li",[e("p",[t._v("注意点")]),t._v(" "),e("ul",[e("li",[t._v("合理使用闭包")]),t._v(" "),e("li",[t._v("用完闭包要及时清除（销毁）")])])])]),t._v(" "),e("h3",{attrs:{id:"js高阶编程技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js高阶编程技巧"}},[t._v("#")]),t._v(" JS高阶编程技巧：")]),t._v(" "),e("h4",{attrs:{id:"惰性函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#惰性函数"}},[t._v("#")]),t._v(" 惰性函数")]),t._v(" "),e("h4",{attrs:{id:"柯理化函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#柯理化函数"}},[t._v("#")]),t._v(" 柯理化函数")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("柯里化是指这样一个函数(假设叫做createCurry)，他接收函数A作为参数，运行后能够返回一个新的函数。并且这个新的函数能够处理函数A的剩余参数。")])])]),t._v(" "),e("h4",{attrs:{id:"高阶函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[t._v("#")]),t._v(" 高阶函数")]),t._v(" "),e("ul",[e("li",[t._v("高阶函数，就是让当前函数获得额外能力的函数")]),t._v(" "),e("li",[t._v("高阶函数的思路，它其实是一个封装公共逻辑的过程")])]),t._v(" "),e("h2",{attrs:{id:"面向对象oop和this处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象oop和this处理"}},[t._v("#")]),t._v(" 面向对象OOP和this处理")]),t._v(" "),e("h3",{attrs:{id:"单例设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例设计模式"}},[t._v("#")]),t._v(" 单例设计模式")]),t._v(" "),e("h3",{attrs:{id:"类和实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类和实例"}},[t._v("#")]),t._v(" 类和实例")]),t._v(" "),e("h3",{attrs:{id:"原型和原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[t._v("#")]),t._v(" 原型和原型链")]),t._v(" "),e("ul",[e("li",[t._v("描述构造函数、实例以及原型之间的关系")]),t._v(" "),e("li",[t._v("构造函数的prototype属性是指向原型的")])]),t._v(" "),e("h4",{attrs:{id:"原型对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),e("ul",[e("li",[t._v("当构造函数被创建出来的时候，会默认关联一个"),e("code",[t._v("Ojbect")]),t._v("类型的新对象，这个对象就是当前构造函数的原型对象，构造函数的原型对象默认是一个空对象。")]),t._v(" "),e("li",[t._v("当然，构造函数创建出来的对象可以访问该构造函数原型对象的属性和方法。")])]),t._v(" "),e("h5",{attrs:{id:"访问原型对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#访问原型对象"}},[t._v("#")]),t._v(" 访问原型对象")]),t._v(" "),e("ul",[e("li",[t._v("1.构造函数."),e("code",[t._v("prototype")])]),t._v(" "),e("li",[t._v("2.实例对象."),e("code",[t._v("__proto__")])]),t._v(" "),e("li",[t._v("3."),e("code",[t._v("object.getPrototypeOf")]),t._v("(实例对象)")])]),t._v(" "),e("h5",{attrs:{id:"prototype"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("prototype")]),t._v(" 函数对象拥有的属性，指向它的原型对象。")])]),t._v(" "),e("h5",{attrs:{id:"proto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" proto")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("__proto__")]),t._v(" 所有的对象都拥有"),e("code",[t._v("__proto__")]),t._v("属性，指向实例的原型。")]),t._v(" "),e("li",[t._v("注："),e("code",[t._v("__proto__")]),t._v("属性并不在"),e("code",[t._v("ECMAScript")]),t._v("标准中，只为了开发和调试而生，不具备通用性，不能出现在正式的代码中。")])]),t._v(" "),e("h5",{attrs:{id:"constructor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("construtor")]),t._v(" 构造器，原型对象可以通过"),e("code",[t._v("constructor")]),t._v("来访问其所关联的构造函数。当然，每个实例对象也从原型中继承了该属性。")])]),t._v(" "),e("h4",{attrs:{id:"原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Man () {};\nfunction Woman () {};\n\nvar m1 = new Man();\nvar w1 = new Woman();\n// 1.让我们看一看食物链(原型链)的顶端 null\nconsole.log(Object.prototype.__proto__);                      //null\n\n// 2.Function.prototype的原型对象为Object.prototype而不是它自己\nconsole.log(Function.prototype.__proto__ == Object.prototype);//true\n\n// 3.Function和Object的构造函数都是Function\nconsole.log(Function.constructor == Function);                //true\nconsole.log(Object.constructor == Function);                  //true\n\n// 4.Function.prototype的构造函数是Function\nconsole.log(Function.prototype.constructor == Function);      //true\n\n// 5.m1的原型对象为Man.prototype\nconsole.log(m1.__proto__ == Man.prototype);  //true\n\n// 6.Man.prototyepe|Woman.prototype的constructor指向Object\n// Man.prototyepe|Woman.prototype的原型对象为Object.prototype\n// 先删除实例成员，通过原型成员访问\ndelete  Man.prototype.constructor;\ndelete  Woman.prototype.constructor;\nconsole.log(Man.prototype.constructor == Object);    //true\nconsole.log(Woman.prototype.constructor == Object);    //true\nconsole.log(Man.prototype.__proto__ == Object.prototype);    //true\nconsole.log(Woman.prototype.__proto__ == Object.prototype);    //true\n\n// 7.Man和Woman的构造函数为Function\n// Man和Woman的构造函数的原型对象为空函数\nconsole.log(Man.constructor == Function);                //true\nconsole.log(Woman.constructor == Function);                //true\nconsole.log(Man.__proto__ == Function.prototype);        //true\nconsole.log(Woman.__proto__ == Function.prototype);        //true\n")])])]),e("h5",{attrs:{id:"访问规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#访问规则"}},[t._v("#")]),t._v(" 访问规则")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("就近原则")])])]),t._v(" "),e("li",[e("p",[t._v("对象在访问属性或方法时，先检查自己的实例，如果存在就直接使用。如果不存在那么就去原型对象上去找，存在就直接使用，如果没有就顺着原型链一直往上查找，找到即使用，找不到就重复该过程直到原型链的顶端，如果还没有找到相应的属性或方法，就返回"),e("code",[t._v("undefined")]),t._v("，报错。")])])]),t._v(" "),e("h4",{attrs:{id:"三种检验方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三种检验方法"}},[t._v("#")]),t._v(" 三种检验方法")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Object.getPrototypeOf")]),t._v("方法用于获取指定实例对象的原型对象。")]),t._v(" "),e("li",[e("code",[t._v("isPrototypeOf")]),t._v("方法用于检查某对象是否在指定对象的原型链中。")]),t._v(" "),e("li",[e("code",[t._v("instanceof")]),t._v("运算符的作用跟"),e("code",[t._v("isPrototypeOf")]),t._v("方法类似，左操作数是待检测的实例对象，右操作数是用于检测的构造函数。如果右操作数指定构造函数的原型对象在左操作数实例对象的原型链上面，则返回结果"),e("code",[t._v("true")]),t._v("，否则返回结果"),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("li",[e("strong",[t._v("注意")]),t._v("：不要错误的认为"),e("code",[t._v("instanceof")]),t._v("检查的是该实例对象是否从当前构造函数实例化创建的，其实它检查的是实例对象是否从当前指定构造函数的原型对象继承属性。")])]),t._v(" "),e("h3",{attrs:{id:"new运算符的实现机制-手写实现new"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new运算符的实现机制-手写实现new"}},[t._v("#")]),t._v(" new运算符的实现机制（手写实现New）")]),t._v(" "),e("h4",{attrs:{id:"通过new操作符调用构造函数-会经历以下4个阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过new操作符调用构造函数-会经历以下4个阶段"}},[t._v("#")]),t._v(" 通过new操作符调用构造函数，会经历以下4个阶段")]),t._v(" "),e("ul",[e("li",[t._v("创建一个新的对象")]),t._v(" "),e("li",[t._v("将构造函数的this指向这个新对象")]),t._v(" "),e("li",[t._v("指向构造函数的代码，为这个对象添加属性，方法等")]),t._v(" "),e("li",[t._v("返回新对象")])]),t._v(" "),e("h4",{attrs:{id:"new下构造函数this的指向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new下构造函数this的指向"}},[t._v("#")]),t._v(" new下构造函数this的指向")]),t._v(" "),e("ul",[e("li",[t._v("当new操作符调用构造函数时，this其实指向的是这个新创建的对象，最后又将新的对象返回出来，被实例对象接收。因此，我们可以说，这个时候，构造函数的this，指向了新的实例对象")])]),t._v(" "),e("h4",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("ul",[e("li",[t._v("1、创建一个空对象（新对象）")]),t._v(" "),e("li",[t._v("2、让空对象的__proto__（IE没有该属性）成员指向了构造函数的prototype成员对象（新对象会被执行[[prtotype]]链接）")]),t._v(" "),e("li",[t._v("3、使用apply调用构造器函数，属性和方法被添加到 this 引用的对象中（新对象和函数调用的this会绑定起来）")]),t._v(" "),e("li",[t._v("4、执行构造函数代码。如果构造函数中没有返回其它对象，那么返回 this，即创建的这个的新对象，否则，返回构造函数中返回的对象。（如果函数没有返回值，那么就会自动返回这个新对象）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function _new(func) {\n    // 第一步 创建新对象\n    let obj= {};\n    // 第二步 空对象的_proto_指向了构造函数的prototype成员对象\n    obj.__proto__ = func.prototype;//\n    // 一二步合并就相当于 let obj=Object.create(func.prototype)\n\n    // 第三步 使用apply调用构造器函数，属性和方法被添加到 this 引用的对象中\n    let result = func.apply(obj);\n    if (result && (typeof (result) == \"object\" || typeof (result) == \"function\")) {\n    // 如果构造函数执行的结果返回的是一个对象，那么返回这个对象\n        return result;\n    }\n    // 如果构造函数返回的不是一个对象，返回创建的新对象\n    return obj;\n}\n/**\n * 模拟实现 new 操作符\n * @param  {Function} ctor [构造函数]\n * @return {Object|Function|Regex|Date|Error}      [返回结果]\n */\nfunction newOperator(ctor){\n    if(typeof ctor !== 'function'){\n      throw 'newOperator function the first param must be a function';\n    }\n    // ES6 new.target 是指向构造函数\n    newOperator.target = ctor;\n    // 1.创建一个全新的对象，\n    // 2.并且执行[[Prototype]]链接\n    // 4.通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。\n    var newObj = Object.create(ctor.prototype);\n    // ES5 arguments转成数组 当然也可以用ES6 [...arguments], Aarry.from(arguments);\n    // 除去ctor构造函数的其余参数\n    var argsArr = [].slice.call(arguments, 1);\n    // 3.生成的新对象会绑定到函数调用的`this`。\n    // 获取到ctor函数返回结果\n    var ctorReturnResult = ctor.apply(newObj, argsArr);\n    // 小结4 中这些类型中合并起来只有Object和Function两种类型 typeof null 也是'object'所以要不等于null，排除null\n    var isObject = typeof ctorReturnResult === 'object' && ctorReturnResult !== null;\n    var isFunction = typeof ctorReturnResult === 'function';\n    if(isObject || isFunction){\n        return ctorReturnResult;\n    }\n    // 5.如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`, `Error`)，那么`new`表达式中的函数调用会自动返回这个新的对象。\n    return newObj;\n}\n\nfunction New(func){\n\t// 声明一个中间对象，该对象最终返回的实例\n\tvar res = {}\n\tif(func.prototype !== null){\n\t\t// 将实例的原型指向构造函数的原型\n\t\tres.__proto__ = func.prototype\n\t}\n\t// ret为构造函数执行的结果，这里通过apply\n\t// 将构造函数内部的this指向修改为指向res，即实例对象\n\tvar ret = func.apply(res, Array.prototype.slice.call(arguments,1))\n\t// 当在构造函数中明确指定了返回对象时，那么new的执行结果就是该返回对象\n\tif((typeof ret === 'object' || typeof ret === 'function') && ret !== null){\n\t\treturn ret\n\t}\n\t// 如果没有明确指定返回对象，则默认返回res，这个res就是实例对象\n\treturn res\n}\n")])])]),e("h3",{attrs:{id:"constructor构造函数模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constructor构造函数模式"}},[t._v("#")]),t._v(" constructor构造函数模式")]),t._v(" "),e("h3",{attrs:{id:"call-apply-bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind"}},[t._v("#")]),t._v(" call/apply/bind")]),t._v(" "),e("h4",{attrs:{id:"call"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[t._v("#")]),t._v(" call")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("call()")]),t._v(" 方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法。")])]),t._v(" "),e("li",[e("p",[t._v("当调用一个函数时，可以赋值一个不同的 "),e("code",[t._v("this")]),t._v(" 对象。"),e("code",[t._v("this")]),t._v(" 引用当前对象，即 "),e("code",[t._v("call")]),t._v(" 方法的第一个参数")])]),t._v(" "),e("li",[e("p",[t._v("通过 "),e("code",[t._v("call")]),t._v(" 方法，你可以在一个对象上借用另一个对象上的方法，比如"),e("code",[t._v("Object.prototype.toString.call([])")]),t._v("，就是一个"),e("code",[t._v("Array")]),t._v("对象借用了"),e("code",[t._v("Object")]),t._v("对象上的方法。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("语法 fun.call(thisArg[, arg1[, arg2[, ...]]])\n")])])])])]),t._v(" "),e("h5",{attrs:{id:"thisarg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thisarg"}},[t._v("#")]),t._v(" thisArg")]),t._v(" "),e("ul",[e("li",[t._v("在fun函数运行时指定的"),e("code",[t._v("this")]),t._v("值。需要注意的是下面几种情况")])]),t._v(" "),e("p",[t._v("（1）不传，或者传"),e("code",[t._v("null")]),t._v("，"),e("code",[t._v("undefined")]),t._v("， 函数中的"),e("code",[t._v("this")]),t._v("指向window对象\n（2）传递另一个函数的函数名，函数中的"),e("code",[t._v("this")]),t._v("指向这个函数的引用，并不一定是该函数执行时真正的"),e("code",[t._v("this")]),t._v("值  （3）值为原始值(数字，字符串，布尔值)的"),e("code",[t._v("this")]),t._v("会指向该原始值的自动包装对象，如 "),e("code",[t._v("String")]),t._v("、"),e("code",[t._v("Number")]),t._v("、"),e("code",[t._v("Boolean")]),t._v("\n（4）传递一个对象，函数中的this指向这个对象")]),t._v(" "),e("h5",{attrs:{id:"arg1-arg2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arg1-arg2"}},[t._v("#")]),t._v(" arg1, arg2, ...")]),t._v(" "),e("ul",[e("li",[t._v("指定的参数列表。")])]),t._v(" "),e("h4",{attrs:{id:"apply"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[t._v("#")]),t._v(" apply")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("语法与 "),e("code",[t._v("call()")]),t._v(" 方法的语法几乎完全相同，唯一的区别在于，apply的第二个参数必须是一个包含多个参数的数组（或类数组对象）。"),e("code",[t._v("apply")]),t._v("的这个特性很重要，")])]),t._v(" "),e("li",[e("p",[t._v("在调用一个存在的函数时，你可以为其指定一个 "),e("code",[t._v("this")]),t._v(" 对象。 "),e("code",[t._v("this")]),t._v(" 指当前对象，也就是正在调用这个函数的对象。 使用 apply， 你可以只写一次这个方法然后在另一个对象中继承它，而不用在新对象中重复写该方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("语法：fun.apply(thisArg[, argsArray])\n")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("注意:")]),t._v(" 需要注意："),e("code",[t._v("Chrome 14")]),t._v(" 以及 "),e("code",[t._v("Internet Explorer 9")]),t._v(" 仍然不接受类数组对象。如果传入类数组对象，它们会抛出异常。")])])]),t._v(" "),e("h4",{attrs:{id:"bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" bind")]),t._v(" "),e("ul",[e("li",[t._v("bind() 函数会创建一个新函数（称为绑定函数）\n"),e("ul",[e("li",[t._v("bind是ES5新增的一个方法")]),t._v(" "),e("li",[t._v("传参和call或apply类似")]),t._v(" "),e("li",[t._v("不会执行对应的函数，call或apply会自动执行对应的函数")]),t._v(" "),e("li",[t._v("返回对函数的引用")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("语法 fun.bind(thisArg[, arg1[, arg2[, ...]]])\n")])])]),e("h3",{attrs:{id:"this指向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this指向"}},[t._v("#")]),t._v(" this指向")]),t._v(" "),e("ul",[e("li",[t._v("作用域")]),t._v(" "),e("li",[t._v("在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。"),e("strong",[t._v("如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined")]),t._v("。但是在非严格模式中，当this指向undefined时，它会被自动指向全局对象。")])]),t._v(" "),e("h3",{attrs:{id:"this五种情况的综合梳理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this五种情况的综合梳理"}},[t._v("#")]),t._v(" this五种情况的综合梳理")]),t._v(" "),e("h4",{attrs:{id:"纯粹的函数调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#纯粹的函数调用"}},[t._v("#")]),t._v(" 纯粹的函数调用")]),t._v(" "),e("ul",[e("li",[t._v("函数最普通用法，此时属于全局调用，函数内this指向全局对象window。")])]),t._v(" "),e("h4",{attrs:{id:"作为对象的方法使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为对象的方法使用"}},[t._v("#")]),t._v(" "),e("strong",[t._v("作为对象的方法使用")])]),t._v(" "),e("ul",[e("li",[t._v("函数作为某个对象的方法，此事this指向该对象。")])]),t._v(" "),e("h4",{attrs:{id:"构造函数生成实例对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数生成实例对象"}},[t._v("#")]),t._v(" "),e("strong",[t._v("构造函数生成实例对象")])]),t._v(" "),e("ul",[e("li",[t._v("作为构造函数使用时，this指向该对象新创建的实例。")])]),t._v(" "),e("h4",{attrs:{id:"使用apply"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用apply"}},[t._v("#")]),t._v(" "),e("strong",[t._v("使用apply")])]),t._v(" "),e("ul",[e("li",[t._v("apply()方法是改变函数内部this的值，若为空默认是指向全局对象window。")])]),t._v(" "),e("h4",{attrs:{id:"事件处理程序中的this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件处理程序中的this"}},[t._v("#")]),t._v(" "),e("strong",[t._v("事件处理程序中的this")])]),t._v(" "),e("ul",[e("li",[t._v("在DOM级事件处理程序中this指向触发事件的元素，而对于IE事件来说，this指向全局对象window。")])]),t._v(" "),e("h3",{attrs:{id:"深拷贝-浅拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝-浅拷贝"}},[t._v("#")]),t._v(" 深拷贝/浅拷贝")]),t._v(" "),e("h4",{attrs:{id:"浅拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[t._v("#")]),t._v(" 浅拷贝")]),t._v(" "),e("ul",[e("li",[t._v("浅拷贝的意思就是只复制引用，而未复制真正的值。")])]),t._v(" "),e("h4",{attrs:{id:"深拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[t._v("#")]),t._v(" 深拷贝")]),t._v(" "),e("ul",[e("li",[t._v("深拷贝就是对目标的完全拷贝，不像浅拷贝那样只是复制了一层引用，就连值也都复制了。只要进行了深拷贝，它们老死不相往来，谁也不会影响谁。")])]),t._v(" "),e("h5",{attrs:{id:"利用-json-对象中的-parse-和-stringify"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用-json-对象中的-parse-和-stringify"}},[t._v("#")]),t._v(" 利用 "),e("code",[t._v("JSON")]),t._v(" 对象中的 "),e("code",[t._v("parse")]),t._v(" 和 "),e("code",[t._v("stringify")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("JSON.stringify")]),t._v(" 是将一个 "),e("code",[t._v("JavaScript")]),t._v(" 值转成一个 "),e("code",[t._v("JSON")]),t._v(" 字符串。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("JSON.parse")]),t._v(" 是将一个 "),e("code",[t._v("JSON")]),t._v(" 字符串转成一个 "),e("code",[t._v("JavaScript")]),t._v(" 值或对象。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const originArray = [1,2,3,4,5];\nconst cloneArray = JSON.parse(JSON.stringify(originArray));\nconsole.log(cloneArray === originArray); // false\n\nconst originObj = {a:'a',b:'b',c:[1,2,3],d:{dd:'dd'}};\nconst cloneObj = JSON.parse(JSON.stringify(originObj));\nconsole.log(cloneObj === originObj); // false\n\ncloneObj.a = 'aa';\ncloneObj.c = [1,1,1];\ncloneObj.d.dd = 'doubled';\n\nconsole.log(cloneObj); // {a:'aa',b:'b',c:[1,1,1],d:{dd:'doubled'}};\nconsole.log(originObj); // {a:'a',b:'b',c:[1,2,3],d:{dd:'dd'}};\n")])])])]),t._v(" "),e("li",[e("p",[t._v("注意："),e("code",[t._v("undefined")]),t._v("、"),e("code",[t._v("function")]),t._v("、"),e("code",[t._v("symbol")]),t._v(" 、正则会在转换过程中被忽略。")])])]),t._v(" "),e("h5",{attrs:{id:"递归的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归的方法"}},[t._v("#")]),t._v(" 递归的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function deepClone(source){\n  const targetObj = source.constructor === Array ? [] : {}; // 判断复制的目标是数组还是对象\n  for(let keys in source){ // 遍历目标\n    if(source.hasOwnProperty(keys)){\n      if(source[keys] && typeof source[keys] === 'object'){ // 如果值是对象，就递归一下\n        targetObj[keys] = source[keys].constructor === Array ? [] : {};\n        targetObj[keys] = deepClone(source[keys]);\n      }else{ // 如果不是，就直接赋值\n        targetObj[keys] = source[keys];\n      }\n    } \n  }\n  return targetObj;\n}\n function deepClone(obj){\n \t\t// 过滤特殊情况\n \t\tif(obj === null) return null;\n \t\tif(typeof obj !== 'object') return obj;\n \t\tif(obj instanceof RegExp){\n \t\t\treturn new RegExp(obj)\n \t\t}\n \t\tif(obj instanceof Date){\n \t\t\treturn new Date(obj)\n \t\t}\n \t\t// 不直接创建空对象目的：克隆的结果和之前保持相同的所属类\n \t\tlet newObj = new obj.constructor;\n \t\tfor(let key in obj){\n \t\t\tif(obj.hasOwnProperty(key)){\n \t\t\t\tnewObj[key] = deepClone(obj[key])\n \t\t\t}\n \t\t}\n \t\treturn newObj\n}\n\n// 浅拷贝+递归 （只考虑了普通的 object和 array两种数据类型\nfunction cloneDeep(target,map = new WeakMap()) {\n  if(typeOf taret ==='object'){\n     let cloneTarget = Array.isArray(target) ? [] : {};\n      \n     if(map.get(target)) {\n        return target;\n    }\n     map.set(target, cloneTarget);\n     for(const key in target){\n        cloneTarget[key] = cloneDeep(target[key], map);\n     }\n     return cloneTarget\n  }else{\n       return target\n  }\n}\n")])])]),e("h4",{attrs:{id:"javascript中的拷贝方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的拷贝方法"}},[t._v("#")]),t._v(" JavaScript中的拷贝方法")]),t._v(" "),e("h5",{attrs:{id:"concat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[t._v("#")]),t._v(" concat")]),t._v(" "),e("ul",[e("li",[t._v("该方法可以连接两个或者更多的数组，但是它不会修改已存在的数组，而是返回一个新数组。")]),t._v(" "),e("li",[e("strong",[t._v("结论："),e("code",[t._v("concat")]),t._v(" 只是对数组的第一层进行深拷贝。")])])]),t._v(" "),e("h5",{attrs:{id:"slice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[t._v("#")]),t._v(" slice")]),t._v(" "),e("ul",[e("li",[t._v("slice() 方法可从已有的数组中返回选定的元素。")]),t._v(" "),e("li",[e("strong",[t._v("结论："),e("code",[t._v("slice")]),t._v(" 只是对数组的第一层进行深拷贝。")])])]),t._v(" "),e("h5",{attrs:{id:"object-assign"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-assign"}},[t._v("#")]),t._v(" Object.assign()")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("结论："),e("code",[t._v("Object.assign()")]),t._v(" 拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。")])])]),t._v(" "),e("h5",{attrs:{id:"展开运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#展开运算符"}},[t._v("#")]),t._v(" ... 展开运算符")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("结论："),e("code",[t._v("...")]),t._v(" 实现的是对象第一层的深拷贝。后面的只是拷贝的引用值。")])])]),t._v(" "),e("h3",{attrs:{id:"四大数据类型检测方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四大数据类型检测方法"}},[t._v("#")]),t._v(" 四大数据类型检测方法")]),t._v(" "),e("h3",{attrs:{id:"四大继承方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四大继承方案"}},[t._v("#")]),t._v(" 四大继承方案")]),t._v(" "),e("h3",{attrs:{id:"实现继承的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现继承的几种方式"}},[t._v("#")]),t._v(" 实现继承的几种方式")]),t._v(" "),e("ul",[e("li",[t._v("红宝书162页")])]),t._v(" "),e("h4",{attrs:{id:"最佳的组合继承方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳的组合继承方案"}},[t._v("#")]),t._v(" 最佳的组合继承方案")]),t._v(" "),e("ul",[e("li",[t._v("1.使用原型链实现对原型属性和方法的继承")]),t._v(" "),e("li",[t._v("2.通过伪造(冒充)构造函数来实现对实例成员的继承，并且解决了父构造函数传参问题")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 1 提供超类型|父类型\nfunction SuperClass(name) {\n    this.name = name;\n    this.showName = function () {\n        console.log(this.name);\n    }\n}\n\n// 2 设置父类型的原型属性和原型方法\nSuperClass.prototype.info = \'SuperClass的信息\';\nSuperClass.prototype.showInfo = function () {\n    console.log(this.info);\n};\n\n// 3 提供子类型\nfunction SubClass(name) {\n    SuperClass.call(this,name);\n}\n\n// 获取父构造函数的实例成员  Person.call(this,name);\n// 获取父构造函数的原型成员  SubClass.prototype = SuperClass.prototype;\nSubClass.prototype = SuperClass.prototype;\nSubClass.prototype.constructor = SubClass;\n\nvar sub_one = new SubClass("zhangsan");\nvar sub_two = new SubClass("lisi");\nconsole.log(sub_one);\nconsole.log(sub_two);\n\n')])])]),e("h2",{attrs:{id:"dom-bom及事件处理机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-bom及事件处理机制"}},[t._v("#")]),t._v(" DOM/BOM及事件处理机制")]),t._v(" "),e("h3",{attrs:{id:"dom-bom核心的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-bom核心的操作"}},[t._v("#")]),t._v(" DOM/BOM核心的操作")]),t._v(" "),e("h3",{attrs:{id:"dom事件流和事件委托"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom事件流和事件委托"}},[t._v("#")]),t._v(" DOM事件流和事件委托")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("捕获、冒泡")])]),t._v(" "),e("li",[e("p",[t._v("事件委托及好处")])]),t._v(" "),e("li",[e("p",[t._v("DOM事件流红宝书374页，事件委托在402页")])])]),t._v(" "),e("h3",{attrs:{id:"发布订阅的设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅的设计模式"}},[t._v("#")]),t._v(" 发布订阅的设计模式")]),t._v(" "),e("h3",{attrs:{id:"事件传播机制和事件代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件传播机制和事件代理"}},[t._v("#")]),t._v(" 事件传播机制和事件代理")]),t._v(" "),e("h3",{attrs:{id:"dom2级事件的核心运行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom2级事件的核心运行机制"}},[t._v("#")]),t._v(" DOM2级事件的核心运行机制")]),t._v(" "),e("h3",{attrs:{id:"移动端touch-gesture事件及封装处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端touch-gesture事件及封装处理"}},[t._v("#")]),t._v(" 移动端Touch/Gesture事件及封装处理")]),t._v(" "),e("h3",{attrs:{id:"浏览器底层渲染机制和dom的回流重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器底层渲染机制和dom的回流重绘"}},[t._v("#")]),t._v(" 浏览器底层渲染机制和DOM的回流重绘")]),t._v(" "),e("h3",{attrs:{id:"dialog模态框组件的封装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dialog模态框组件的封装"}},[t._v("#")]),t._v(" DIALOG模态框组件的封装")]),t._v(" "),e("h3",{attrs:{id:"cookie-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-storage"}},[t._v("#")]),t._v(" Cookie/storage")]),t._v(" "),e("ul",[e("li",[t._v("cookie的构成")]),t._v(" "),e("li",[t._v("localStorage和sessionStorage")]),t._v(" "),e("li",[t._v("他们的区别")]),t._v(" "),e("li",[t._v("storge的最大存储空间")]),t._v(" "),e("li",[t._v("cookie的HTTPOnly字段加上后就无法通过js获取cookie，从而防止xss攻击")])]),t._v(" "),e("h3",{attrs:{id:"cookie-localstorage-sessionstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-localstorage-sessionstorage"}},[t._v("#")]),t._v(" Cookie,LocalStorage,SessionStorage")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("特性")]),t._v(" "),e("th",[t._v("Cookie")]),t._v(" "),e("th",[t._v("LocalStorage")]),t._v(" "),e("th",[t._v("SessionStorage")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("数据的生命期")]),t._v(" "),e("td",[t._v("一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效")]),t._v(" "),e("td",[t._v("除非被清除，否则永久保存")]),t._v(" "),e("td",[t._v("仅在当前会话下有效，关闭页面或浏览器后被清除")])]),t._v(" "),e("tr",[e("td",[t._v("存放数据大小")]),t._v(" "),e("td",[t._v("4K左右")]),t._v(" "),e("td",[t._v("一般为5MB")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("与服务器端通信")]),t._v(" "),e("td",[t._v("每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题")]),t._v(" "),e("td",[t._v("仅在客户端（即浏览器）中保存，不参与和服务器的通信")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("易用性")]),t._v(" "),e("td",[t._v("需要程序员自己封装，源生的Cookie接口不友好")]),t._v(" "),e("td",[t._v("源生接口可以接受，亦可再次封装来对Object和Array有更好的支持")]),t._v(" "),e("td")])])]),t._v(" "),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),e("h3",{attrs:{id:"数组和对象的常见方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组和对象的常见方法"}},[t._v("#")]),t._v(" 数组和对象的常见方法")]),t._v(" "),e("ul",[e("li",[t._v("Array：slice/splice/concat/filter/map/reduce")]),t._v(" "),e("li",[t._v("Object：keys/assign用于浅拷贝")]),t._v(" "),e("li",[t._v("改变原数组的方法")])]),t._v(" "),e("h3",{attrs:{id:"防抖-节流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防抖-节流"}},[t._v("#")]),t._v(" 防抖/节流")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("函数防抖")]),t._v(" 是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。")]),t._v(" "),e("li",[e("strong",[t._v("函数节流")]),t._v(" 是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  var timer = null;\n\n  return function() {\n    var context = this,\n      args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  var preTime = Date.now();\n\n  return function() {\n    var context = this,\n      args = arguments,\n      nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) {\n      preTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n\n")])])]),e("h2",{attrs:{id:"es6-es7的核心知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-es7的核心知识"}},[t._v("#")]),t._v(" ES6/ES7的核心知识")]),t._v(" "),e("h3",{attrs:{id:"requestanimationframe-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe-2"}},[t._v("#")]),t._v(" requestAnimationFrame")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("动画，相比于setInterval实现动画效果requestAnimationFrame的优势是什么")])]),t._v(" "),e("li")]),t._v(" "),e("h3",{attrs:{id:"let-const-var的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-const-var的区别"}},[t._v("#")]),t._v(" let/const/var的区别")]),t._v(" "),e("h3",{attrs:{id:"箭头函数arrowfunction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数arrowfunction"}},[t._v("#")]),t._v(" 箭头函数ArrowFunction")]),t._v(" "),e("h3",{attrs:{id:"解构赋值和拓展运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值和拓展运算符"}},[t._v("#")]),t._v(" 解构赋值和拓展运算符")]),t._v(" "),e("h3",{attrs:{id:"set-map数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-map数据结构"}},[t._v("#")]),t._v(" Set/Map数据结构")]),t._v(" "),e("ul",[e("li",[t._v("Set/Map，数据结构")])]),t._v(" "),e("h4",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("它类似于数组，但是其成员的值都是唯一的，没有重复的值（甚至在Set内部，NaN和NaN是相等的）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Set")]),t._v("本身是一个构造函数，用来生成 Set 数据结构。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const s = new Set();\n\n[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));\n\nfor (let i of s) {\n  console.log(i);\n}\n// 2 3 5 4\n")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("set同样也有属性用于获取它里面数据的长度")]),t._v("size")])]),t._v(" "),e("li",[e("p",[t._v("然后set结构也是可以遍历的，但是不能再简单的用for循环去进行遍历，而是要用forEach方法。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("add(value)：")])]),t._v(" "),e("ul",[e("li",[t._v("用于往set里面添加新的值，返回值是set结构本身。")]),t._v(" "),e("li",[t._v("add方法是用来往set结构里面添加值的，其返回值就是set结构本身，并且一次只能添加一个值。")]),t._v(" "),e("li",[t._v("如果用add方法去添加一个set结构里面已经存在的值的话是没有作用的。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("delete(value)：")])])]),t._v(" "),e("li",[e("p",[t._v("用于删除某个值，返回一个布尔值，表示删除是否成功。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("has(value)：")])])]),t._v(" "),e("li",[e("p",[t._v("返回一个布尔值，用于判断该值是否是set的成员。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("clear()：")])]),t._v(" "),e("ul",[e("li",[t._v("用于清除所有成员，没有返回值。")])])])]),t._v(" "),e("h4",{attrs:{id:"weakset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[t._v("#")]),t._v(" weakSet")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("weakset和set很相似，也是不重复的值的集合。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("区别在于：")])])]),t._v(" "),e("li",[e("p",[t._v("WeakSet的成员只能是对象，而不能是其他类型的值。")])]),t._v(" "),e("li",[e("p",[t._v("WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用；")])]),t._v(" "),e("li",[e("p",[t._v("也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于WeakSet之中。")])]),t._v(" "),e("li",[e("p",[t._v("这个特点意味着，无法引用WeakSet的成员，因此WeakSet是不可遍历的。")])])]),t._v(" "),e("h4",{attrs:{id:"map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Map结构提供了“值 —— 值”的对应，是一种更完善的结构实。")])]),t._v(" "),e("li",[e("p",[t._v("Map和Object类似，也是键值对的集合。")])]),t._v(" "),e("li",[e("p",[t._v("但是Map的键不再仅限于字符串，任何数据类型都可以作为Map结构的键名；")])]),t._v(" "),e("li",[e("p",[t._v("甚至Object都可以做为键名。")])]),t._v(" "),e("li",[e("p",[t._v("Map在初始化的时候，接收一个二维数组作为参数，二维数组里面的第一项和第二项将被作为一个键值对存入Map结构中。")])]),t._v(" "),e("li",[e("p",[t._v("set('key','content')：")]),t._v(" "),e("ul",[e("li",[t._v("用于往Map里面添加新的值，返回值是Map结构本身。")])])]),t._v(" "),e("li",[e("p",[t._v("get('key')：")]),t._v(" "),e("ul",[e("li",[t._v("用于获取key对应的值，返回获取到的值")])])]),t._v(" "),e("li",[e("p",[t._v("has('key')：")]),t._v(" "),e("ul",[e("li",[t._v("返回一个布尔值，用于判断该值是否是Map的成员。")])])]),t._v(" "),e("li",[e("p",[t._v("delete('key')：")]),t._v(" "),e("ul",[e("li",[t._v("用于删除指定的键值，返回一个布尔值，用于表示删除是否成功")])])]),t._v(" "),e("li",[e("p",[t._v("clear()：")]),t._v(" "),e("ul",[e("li",[t._v("用于清除Map结构里的所有数据，没有返回值")])])]),t._v(" "),e("li",[e("p",[t._v("注意： "),e("strong",[t._v("我们在用对象多为键名存数据的时候，一定要用变量名指向这个对象；")])])])]),t._v(" "),e("h3",{attrs:{id:"实现一个symbol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现一个symbol"}},[t._v("#")]),t._v(" 实现一个Symbol")]),t._v(" "),e("h3",{attrs:{id:"异步编程-promise和async-await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步编程-promise和async-await"}},[t._v("#")]),t._v(" 异步编程：Promise和async await")]),t._v(" "),e("ul",[e("li",[t._v("内部状态")]),t._v(" "),e("li",[t._v("Promise.race和Promise.all")])]),t._v(" "),e("h3",{attrs:{id:"promise设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise设计模式"}},[t._v("#")]),t._v(" Promise设计模式")]),t._v(" "),e("h3",{attrs:{id:"async-await及实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await及实现原理"}},[t._v("#")]),t._v(" async/await及实现原理")]),t._v(" "),e("h4",{attrs:{id:"async-await-基础语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await-基础语法"}},[t._v("#")]),t._v(" async/await 基础语法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 定义一个异步函数（假设他是一个异步函数）\ngetJSON(){\n    return 'JSON'\n}\n\n// 在需要使用上面异步函数的函数前面，加上async声明，声明这是一个异步函数\nasync testAsync() {\n  // 在异步函数前面加上await，函数执行就会等待用await声明的异步函数执行完毕之后，在往下执行\n  await getJSON()\n  \n  ...剩下的代码\n}\nasync testAsync() {\n  try {\n     await getJSON()\n  } catch(err) {\n     console.log(err)\n  }\n  ...剩下的代码\n}\n")])])]),e("ul",[e("li",[t._v("还需要注意的一点就是使用async/await的时候，是无法捕获错误的，这个时候就要用到我们es5里面一个被大家遗忘了的try/catch，来进行错误的捕获：")]),t._v(" "),e("li",[t._v("1.async函数在声明形式上和普通函数没有区别，函数声明式，函数表达式，对象方法，class方法和箭头函数等都可以声明async函数。")]),t._v(" "),e("li",[t._v("2.任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行。")]),t._v(" "),e("li",[t._v("3."),e("strong",[t._v("async函数返回的 Promise 对象")]),t._v("，"),e("strong",[t._v("必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误")]),t._v("。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。")]),t._v(" "),e("li",[t._v("async函数，返回的是一个Promise对象")]),t._v(" "),e("li",[t._v("await是英文单词‘等待’的意思，代表的意思也是等待，那他等的到底是个什么东西呢？还是一个Promise。")])]),t._v(" "),e("h4",{attrs:{id:"async-await和promise直接的转化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await和promise直接的转化"}},[t._v("#")]),t._v(" async/await和Promise直接的转化")]),t._v(" "),e("ul",[e("li",[t._v("async/await其实是基于Promise的。async函数其实是把Promise包装了一下。")]),t._v(" "),e("li",[t._v("因为await本身返回的也是一个Promise,它只是把await后面的代码放到了await返回的Promise的.then后面，以此来实现的。")])]),t._v(" "),e("h3",{attrs:{id:"generator生成函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator生成函数"}},[t._v("#")]),t._v(" Generator生成函数")]),t._v(" "),e("h3",{attrs:{id:"interator迭代器和for-of循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interator迭代器和for-of循环"}},[t._v("#")]),t._v(" Interator迭代器和for of循环")]),t._v(" "),e("h3",{attrs:{id:"promise-a-规范-手写promise源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-a-规范-手写promise源码"}},[t._v("#")]),t._v(" Promise A+规范（手写Promise源码）")]),t._v(" "),e("ul",[e("li",[t._v("https://www.bilibili.com/video/BV1yJ411771n")])]),t._v(" "),e("h3",{attrs:{id:"js底层运行机制-单线程和同步异步编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js底层运行机制-单线程和同步异步编程"}},[t._v("#")]),t._v(" JS底层运行机制：单线程和同步异步编程")]),t._v(" "),e("h3",{attrs:{id:"js底层运行机制-微任务宏任务和事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js底层运行机制-微任务宏任务和事件循环机制"}},[t._v("#")]),t._v(" JS底层运行机制：微任务宏任务和事件循环机制")]),t._v(" "),e("ul",[e("li",[t._v("evetLoop")]),t._v(" "),e("li",[t._v("单线程、解释性语言")]),t._v(" "),e("li",[t._v("事件循环")]),t._v(" "),e("li",[t._v("宏任务/微任务")])]),t._v(" "),e("h1",{attrs:{id:"正则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),e("h2",{attrs:{id:"零宽断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#零宽断言"}},[t._v("#")]),t._v(" 零宽断言")]),t._v(" "),e("h1",{attrs:{id:"网络通信层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络通信层"}},[t._v("#")]),t._v(" 网络通信层")]),t._v(" "),e("h2",{attrs:{id:"ajax-fetch-axios"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ajax-fetch-axios"}},[t._v("#")]),t._v(" AJAX/Fetch/axios")]),t._v(" "),e("h3",{attrs:{id:"ajax核心四步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ajax核心四步骤"}},[t._v("#")]),t._v(" AJAX核心四步骤")]),t._v(" "),e("ul",[e("li",[t._v("原理")])]),t._v(" "),e("h3",{attrs:{id:"axios库和源剖析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#axios库和源剖析"}},[t._v("#")]),t._v(" axios库和源剖析")]),t._v(" "),e("h3",{attrs:{id:"fetch基础和实战应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch基础和实战应用"}},[t._v("#")]),t._v(" fetch基础和实战应用")]),t._v(" "),e("h3",{attrs:{id:"web-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[t._v("#")]),t._v(" Web Worker")]),t._v(" "),e("h2",{attrs:{id:"http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),e("h3",{attrs:{id:"http1-0-2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-2-0"}},[t._v("#")]),t._v(" Http1.0/2.0")]),t._v(" "),e("h3",{attrs:{id:"tcp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),e("h4",{attrs:{id:"tcp三次握手和四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手和四次挥手"}},[t._v("#")]),t._v(" TCP三次握手和四次挥手")]),t._v(" "),e("h3",{attrs:{id:"get-post核心机制与区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-post核心机制与区别"}},[t._v("#")]),t._v(" GET/POST核心机制与区别")]),t._v(" "),e("h3",{attrs:{id:"http网络状态码和实战中的处理方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http网络状态码和实战中的处理方案"}},[t._v("#")]),t._v(" HTTP网络状态码和实战中的处理方案")]),t._v(" "),e("h2",{attrs:{id:"跨域处理方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域处理方案"}},[t._v("#")]),t._v(" 跨域处理方案")]),t._v(" "),e("h3",{attrs:{id:"性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),e("h1",{attrs:{id:"浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),e("h2",{attrs:{id:"内存回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存回收"}},[t._v("#")]),t._v(" 内存回收")]),t._v(" "),e("ul",[e("li",[t._v("JavaScript有自动垃圾收集机制，垃圾收集器会每隔一段时间就执行一次释放操作，找出那些不再继续使用的值，然后释放其占用的内存。")])]),t._v(" "),e("h4",{attrs:{id:"局部变量和全局变量的销毁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#局部变量和全局变量的销毁"}},[t._v("#")]),t._v(" 局部变量和全局变量的销毁")]),t._v(" "),e("ul",[e("li",[t._v("局部变量：局部作用域中，当函数执行完毕，局部变量也就没有存在的必要了，因此垃圾收集器很容易做出判断并回收。")]),t._v(" "),e("li",[t._v("全局变量：全局变量什么时候需要自动释放内存空间则很难判断，所以在开发中尽量避免使用全局变量。")])]),t._v(" "),e("h4",{attrs:{id:"以google的v8引擎为例-v8引擎中所有的js对象都是通过堆来进行内存分配的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以google的v8引擎为例-v8引擎中所有的js对象都是通过堆来进行内存分配的"}},[t._v("#")]),t._v(" 以Google的V8引擎为例，V8引擎中所有的JS对象都是通过堆来进行内存分配的")]),t._v(" "),e("ul",[e("li",[t._v("初始分配：当声明变量并赋值时，V8引擎就会在堆内存中分配给这个变量。")]),t._v(" "),e("li",[t._v("继续申请：当已申请的内存不足以存储这个变量时，V8引擎就会继续申请内存，直到堆的大小达到了V8引擎的内存上限为止。")])]),t._v(" "),e("h4",{attrs:{id:"v8引擎对堆内存中的js对象进行分代管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v8引擎对堆内存中的js对象进行分代管理"}},[t._v("#")]),t._v(" V8引擎对堆内存中的JS对象进行分代管理")]),t._v(" "),e("ul",[e("li",[t._v("新生代：存活周期较短的JS对象，如临时变量、字符串等。")]),t._v(" "),e("li",[t._v("老生代：经过多次垃圾回收仍然存活，存活周期较长的对象，如主控制器、服务器对象等。")])]),t._v(" "),e("h2",{attrs:{id:"垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),e("ul",[e("li",[t._v("红宝书78页")]),t._v(" "),e("li",[t._v("垃圾回收GC的全拼是 Garbage Collection 其在维基百科的定义是： 在计算机科学中，"),e("strong",[t._v("垃圾回收")]),t._v("（英语：Garbage Collection，缩写为GC）是一种自动的"),e("a",{attrs:{href:"https://link.jianshu.com?t=https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存管理"),e("OutboundLink")],1),t._v("机制。当一个电脑上的动态内存不再需要时，就应该予以释放，以让出内存，这种内存资源管理，称为垃圾回收（garbage collection）")])]),t._v(" "),e("h4",{attrs:{id:"可达性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可达性"}},[t._v("#")]),t._v(" 可达性")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("简单地说，“可达性” 值就是那些以某种方式可访问或可用的值，它们被保证存储在内存中。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("1. 有一组基本的固有可达值，由于显而易见的原因无法删除。这些值称为根，例如:")])]),t._v(" "),e("ul",[e("li",[t._v("本地函数的局部变量和参数")]),t._v(" "),e("li",[t._v("当前嵌套调用链上的其他函数的变量和参数")]),t._v(" "),e("li",[t._v("全局变量")]),t._v(" "),e("li",[t._v("还有一些其他的，内部的")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("2. 如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的。")])])])]),t._v(" "),e("h4",{attrs:{id:"垃圾回收算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[t._v("#")]),t._v(" 垃圾回收算法")]),t._v(" "),e("h5",{attrs:{id:"一、-标记-清除算法-mark-sweep-gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、-标记-清除算法-mark-sweep-gc"}},[t._v("#")]),t._v(" 一、 标记-清除算法 Mark-Sweep GC")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("标记清除算法将“不再使用的对象”定义为“"),e("strong",[t._v("无法到达的对象")]),t._v("”。即从根部（在JS中就是全局对象）出发定时扫描内存中的对象，凡是能从根部到达的对象，"),e("strong",[t._v("保留")]),t._v("。那些从根部出发无法触及到的对象被标记为"),e("strong",[t._v("不再使用")]),t._v("，稍后进行回收。")])]),t._v(" "),e("li",[e("p",[t._v("如字面意思 mark-sweep 分为两个阶段：")]),t._v(" "),e("ol",[e("li",[t._v("标记阶段：从根集合出发，将所有活动对象及其子对象打上标记")]),t._v(" "),e("li",[t._v("清除阶段：遍历堆，将非活动对象（未打上标记）的连接到空闲链表上")])])]),t._v(" "),e("li",[e("p",[t._v("垃圾回收步骤")]),t._v(" "),e("ul",[e("li",[t._v("垃圾回收器获取根并“标记”(记住)它们。")]),t._v(" "),e("li",[t._v("然后它访问并“标记”所有来自它们的引用。")]),t._v(" "),e("li",[t._v("然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。")]),t._v(" "),e("li",[t._v("以此类推，直到有未访问的引用(可以从根访问)为止。除标记的对象外，所有对象都被删除。")]),t._v(" "),e("li",[t._v("除标记的对象外，所有对象都被删除。")])])]),t._v(" "),e("li",[e("h4",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),e("ul",[e("li",[t._v("实现简单， 容易和其他算法组合")])])]),t._v(" "),e("li",[e("p",[t._v("缺点")]),t._v(" "),e("ul",[e("li",[t._v("碎片化， 会导致无数小分块散落在堆的各处")])]),t._v(" "),e("ul",[e("li",[t._v("分配速度不理想，每次分配都需要遍历空闲列表找到足够大的分块")]),t._v(" "),e("li",[t._v("与写时复制技术不兼容，因为每次都会在活动对象上打上标记")])])])]),t._v(" "),e("h5",{attrs:{id:"二、标记-压缩-mark-compact"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、标记-压缩-mark-compact"}},[t._v("#")]),t._v(" 二、标记-压缩 Mark-Compact")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("和“标记－清除”相似，不过在标记阶段后它将所有活动对象紧密的排在堆的一侧（压缩），消除了内存碎片， 不过压缩是需要花费计算成本的。如下图过程，标记后需要定位各个活动对象的新内存地址，然后再移动对象，总共搜索了3次堆。")])]),t._v(" "),e("li",[e("h4",{attrs:{id:"优点-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),e("ul",[e("li",[t._v("有效利用了堆，不会出现内存碎片 也不会像复制算法那样只能利用堆的一部分")])])]),t._v(" "),e("li",[e("p",[t._v("缺点")]),t._v(" "),e("ul",[e("li",[t._v("压缩过程的开销，需要多次搜索堆")])])])]),t._v(" "),e("h5",{attrs:{id:"三、引用计数-reference-counting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、引用计数-reference-counting"}},[t._v("#")]),t._v(" 三、引用计数 Reference Counting")]),t._v(" "),e("ul",[e("li",[t._v("引用计数，就是记录每个对象被引用的次数，每次新建对象、赋值引用和删除引用的同时更新计数器，如果计数器值为0则直接回收内存。 很明显，引用计数最大的优势是暂停时间短")]),t._v(" "),e("li",[t._v("优点\n"),e("ul",[e("li",[t._v("可即刻回收垃圾")]),t._v(" "),e("li",[t._v("最大暂停时间短")]),t._v(" "),e("li",[t._v("没有必要沿指针查找， 不要和标记-清除算法一样沿着根集合开始查找")])])]),t._v(" "),e("li",[t._v("缺点---致命的问题，那就是"),e("strong",[t._v("循环引用")]),t._v(" "),e("ul",[e("li",[t._v("计数器的增减处理繁重")]),t._v(" "),e("li",[t._v("计数器需要占用很多位")]),t._v(" "),e("li",[t._v("实现繁琐复杂， 每个赋值操作都得替换成引用更新操作")]),t._v(" "),e("li",[t._v("循环引用无法回收")]),t._v(" "),e("li",[t._v("如果两个对象相互引用，尽管他们已不再使用，但是垃圾回收器不会进行回收，最终可能会导致内存泄露。")])])])]),t._v(" "),e("h5",{attrs:{id:"四、-gc-复制算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、-gc-复制算法"}},[t._v("#")]),t._v(" 四、 GC 复制算法")]),t._v(" "),e("ul",[e("li",[t._v("堆分为两个大小相同的空间 From 和 To， 利用 From 空间进行分配，当 From 空间满的时候，GC将其中的活动对象复制到 To 空间，之后将两个空间互换即完成GC。")]),t._v(" "),e("li",[t._v("优点\n"),e("ul",[e("li",[t._v("优秀的吞吐量， 只需要关心活动对象")]),t._v(" "),e("li",[t._v("可实现高速分配； 因为分块是连续的，不需要使用空闲链表")]),t._v(" "),e("li",[t._v("不会发生碎片化")]),t._v(" "),e("li",[t._v("与缓存兼容")])])]),t._v(" "),e("li",[t._v("缺点\n"),e("ul",[e("li",[t._v("堆使用率低")]),t._v(" "),e("li",[t._v("与保守式GC不兼容")]),t._v(" "),e("li",[t._v("递归调用函数， 复制子对象需要递归调用复制函数 消耗栈")])])])]),t._v(" "),e("h5",{attrs:{id:"五、-保守式gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、-保守式gc"}},[t._v("#")]),t._v(" 五、 保守式GC")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("根空间有以下几种：")]),t._v(" "),e("ul",[e("li",[t._v("寄存器")]),t._v(" "),e("li",[t._v("调用栈")]),t._v(" "),e("li",[t._v("全局变量空间")])])]),t._v(" "),e("li",[e("p",[t._v("但这些都是不明确的根， 因为调用栈里边的调用帧(call frame) 既有指针也有非指针（值类型）")])]),t._v(" "),e("li",[e("p",[t._v("保守式GC检查不明确根的基本项目：")]),t._v(" "),e("ul",[e("li",[t._v("是不是被正确对齐的值？（在32位cpu的情况下，为4的倍数）")]),t._v(" "),e("li",[t._v("是不是指针堆内？")]),t._v(" "),e("li",[t._v("是不是指着对象的开头？")])])]),t._v(" "),e("li",[e("p",[t._v("有种情况是，非指正和堆里的对象地址一样；这时保守式GC “把可以的东西看做指针，稳妥处理”")])]),t._v(" "),e("li",[e("p",[t._v("优点")]),t._v(" "),e("ul",[e("li",[t._v("GC不依赖于语言处理程序")])])]),t._v(" "),e("li",[e("p",[t._v("缺点")]),t._v(" "),e("ul",[e("li",[t._v("识别指针和非指针需要成本")]),t._v(" "),e("li",[t._v("错误识别指针会压迫堆； 可能错将非指针当做指针,然后将其作为内存地址使得对应堆中的死对象当做活对象")]),t._v(" "),e("li",[t._v("能够使用的gc算法有限； 不能使用复制算法这类移动对象的gc算法")])])]),t._v(" "),e("li",[e("p",[t._v("准确式GC")]),t._v(" "),e("ul",[e("li",[t._v("需要依赖 “语言处理程序的支援”，能基于能精确识别指针和非指针的“正确根”来执行gc")])])])]),t._v(" "),e("h5",{attrs:{id:"六、分代回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、分代回收"}},[t._v("#")]),t._v(" 六、分代回收")]),t._v(" "),e("ul",[e("li",[t._v("出发点：大部分对象生成后马上就变成垃圾，很少有对象能活的很久")]),t._v(" "),e("li",[t._v("新生代 = 生成空间 + 2 * 幸存区 复制算法")]),t._v(" "),e("li",[t._v("老年代 标记-清除算法")]),t._v(" "),e("li",[t._v("对象在生成空间创建，当生成空间满之后进行 minor gc，将活动对象复制到第一个幸存区，并增加其“年龄” age，当这个幸存区满之后再将此次生成空间和这个幸存区的活动对象复制到另一个幸存区，如此反复，当活动对象的 age 达到一定次数后将其移动到老年代； 当老年代满的时候就用标记-清除或标记-压缩算法进行major gc")]),t._v(" "),e("li",[t._v("吞吐量得到改善， 分代垃圾回收花费的时间是GC复制算法的四分之一；但是如果部分程序新生成对象存活很久的话分代回收会适得其反")])]),t._v(" "),e("h5",{attrs:{id:"七、增量式gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、增量式gc"}},[t._v("#")]),t._v(" 七、增量式GC")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("本来gc只是默默的在幕后回收资源的，但是如果gc任务繁重则会长时间暂停应用程序的执行， 增量式gc就是一种逐渐推进垃圾回收来控制mutator最大暂停时间的方法")])]),t._v(" "),e("li",[e("h4",{attrs:{id:"三色标记算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三色标记算法"}},[t._v("#")]),t._v(" 三色标记算法")]),t._v(" "),e("ul",[e("li",[t._v("白色： 还未搜索过的对象")]),t._v(" "),e("li",[t._v("灰色： 正在搜索的对象")]),t._v(" "),e("li",[t._v("黑色： 搜索完成的对象")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("根查找阶段")]),t._v("： 对能直接从根引用的对象打上标记，堆放到标记栈里（白色 涂成 灰色）")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("标记阶段")]),t._v("： 从标记栈中取出对象，将其子对象涂成灰色；这个阶段不是一下子处理所有的灰色对象，而只是处理一定个数，然后暂停gc")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("清除阶段")]),t._v("： 将没被标记的白色对象连接到空闲链表，并重置已标记的对象标记位")])])]),t._v(" "),e("h4",{attrs:{id:"一些优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些优化"}},[t._v("#")]),t._v(" 一些优化")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("分代回收")]),t._v("——对象分为两组:“新对象”和“旧对象”。许多对象出现，完成它们的工作并迅速结 ，它们很快就会被清理干净。那些活得足够久的对象，会变“老”，并且很少接受检查。")]),t._v(" "),e("li",[e("strong",[t._v("增量回收")]),t._v("——如果有很多对象，并且我们试图一次遍历并标记整个对象集，那么可能会花费一些时间，并在执行中会有一定的延迟。因此，引擎试图将垃圾回收分解为多个部分。然后，各个部分分别执行。这需要额外的标记来跟踪变化，这样有很多微小的延迟，而不是很大的延迟。")]),t._v(" "),e("li",[e("strong",[t._v("空闲时间收集")]),t._v("——垃圾回收器只在 CPU 空闲时运行，以减少对执行的可能影响。")])]),t._v(" "),e("h2",{attrs:{id:"内存泄漏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[t._v("#")]),t._v(" 内存泄漏")]),t._v(" "),e("ul",[e("li",[t._v("对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。 对于不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）")])]),t._v(" "),e("h3",{attrs:{id:"内存泄漏识别方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏识别方法"}},[t._v("#")]),t._v(" 内存泄漏识别方法")]),t._v(" "),e("h4",{attrs:{id:"浏览器方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器方法"}},[t._v("#")]),t._v(" 浏览器方法")]),t._v(" "),e("ul",[e("li",[t._v("打开开发者工具，选择 Memory")]),t._v(" "),e("li",[t._v("在右侧的Select profiling type字段里面勾选 timeline")]),t._v(" "),e("li",[t._v("点击左上角的录制按钮。")]),t._v(" "),e("li",[t._v("在页面上进行各种操作，模拟用户的使用情况。")]),t._v(" "),e("li",[t._v("一段时间后，点击左上角的 stop 按钮，面板上就会显示这段时间的内存占用情况。")])]),t._v(" "),e("h4",{attrs:{id:"命令行方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行方法"}},[t._v("#")]),t._v(" 命令行方法")]),t._v(" "),e("ul",[e("li",[t._v("使用 "),e("code",[t._v("Node")]),t._v(" 提供的 "),e("code",[t._v("process.memoryUsage")]),t._v(" 方法。")])]),t._v(" "),e("h3",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),e("h3",{attrs:{id:"浏览器渲染原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染原理"}},[t._v("#")]),t._v(" 浏览器渲染原理")]),t._v(" "),e("h2",{attrs:{id:"event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),e("h3",{attrs:{id:"进程和线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),e("h4",{attrs:{id:"进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),e("ul",[e("li",[t._v("应用程序的执行实例，每一个进程都是由私有的虚拟地址空间、代码、数据和其他系统资源所组成。")]),t._v(" "),e("li",[t._v("进程：资源分配的最小单位")])]),t._v(" "),e("h4",{attrs:{id:"线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),e("ul",[e("li",[t._v("线程是进程内的一个独立执行单元，在不同的线程之间是可以共享进程资源的。")]),t._v(" "),e("li",[t._v("线程：程序执行的最小单位")])]),t._v(" "),e("h4",{attrs:{id:"event-loop-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-2"}},[t._v("#")]),t._v(" event Loop")]),t._v(" "),e("ul",[e("li",[t._v("栈中的代码会调用各种外部API，它们在任务队列中加入各种事件(onClick,onLoad,onDone)，只要栈中的代码执行完毕(js引擎存在"),e("code",[t._v("monitoring process")]),t._v("进程，会持续不断的检查主线程执行栈是否为空)，主线程就回去读取任务队列，在按顺序执行这些事件对应的回调函数。也就是说主线程从任务队列中读取事件，这个过程是循环不断的，所以这种运行机制又成为"),e("code",[t._v("Event Loop")]),t._v("(事件循环)。")])]),t._v(" "),e("h3",{attrs:{id:"宏任务和微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),e("h4",{attrs:{id:"宏任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),e("ul",[e("li",[t._v("同步任务和异步任务的划分其实并不准确，准确的分类方式是宏任务(Macrotask)和微任务(Microtask)。")]),t._v(" "),e("li",[t._v("宏任务包括："),e("code",[t._v("script(整体代码)")]),t._v(", "),e("code",[t._v("setTimeout")]),t._v(", "),e("code",[t._v("setInterval")]),t._v(", "),e("code",[t._v("requestAnimationFrame")]),t._v(", "),e("code",[t._v("I/O")]),t._v(","),e("code",[t._v("setImmediate")]),t._v("。Ajax")]),t._v(" "),e("li",[t._v("其中"),e("code",[t._v("setImmediate")]),t._v("只存在于Node中，"),e("code",[t._v("requestAnimationFrame")]),t._v("只存在于浏览器中。")])]),t._v(" "),e("h4",{attrs:{id:"微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),e("ul",[e("li",[t._v("微任务包括： "),e("code",[t._v("Promise")]),t._v(", "),e("code",[t._v("Object.observe")]),t._v("(已废弃), "),e("code",[t._v("MutationObserver")]),t._v("(html5新特性)，"),e("code",[t._v("process.nextTick")]),t._v("。")]),t._v(" "),e("li",[t._v("其中"),e("code",[t._v("process.nextTick")]),t._v("只存在于Node中，"),e("code",[t._v("MutationObserver")]),t._v("只存在于浏览器中。")])]),t._v(" "),e("h4",{attrs:{id:"注意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" "),e("strong",[t._v("注意：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("UI Rendering")]),t._v("不属于宏任务，也不属于微任务，它是一个与微任务平行的一个操作步骤。")])]),t._v(" "),e("h3",{attrs:{id:"执行方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行方法"}},[t._v("#")]),t._v(" 执行方法")]),t._v(" "),e("ul",[e("li",[t._v("这种分类的执行方式就是，执行一个宏任务，过程中遇到微任务时，将其放到微任务的事件队列里，当前宏任务执行完成后，会查看微任务的事件队列，依次执行里面的微任务。如果还有宏任务的话，再重新开启宏任务……")])]),t._v(" "),e("h3",{attrs:{id:"node下的event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node下的event-loop"}},[t._v("#")]),t._v(" Node下的Event Loop")]),t._v(" "),e("h2",{attrs:{id:"web-worker-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-worker-2"}},[t._v("#")]),t._v(" Web Worker")]),t._v(" "),e("ul",[e("li",[t._v("HTML5的新特性"),e("code",[t._v("Web Worker")])]),t._v(" "),e("li",[t._v("为了解决不可避免的耗时操作(多重循环、复杂的运算)，HTML5提出了"),e("code",[t._v("Web Worker")]),t._v("，它会在当前的js执行主线程中开辟出一个额外的线程来运行js文件，这个新的线程和js主线程之间不会互相影响，同时提供了数据交换的接口："),e("code",[t._v("postMessage")]),t._v("和"),e("code",[t._v("onMessage")])]),t._v(" "),e("li",[t._v("但是因为它创建的子线程完全受控于主线程，且位于外部文件中，无法访问DOM。所以它并没有改变js单线程的本质。")])]),t._v(" "),e("h1",{attrs:{id:"hybird或者app再或者小程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hybird或者app再或者小程序"}},[t._v("#")]),t._v(" Hybird或者APP再或者小程序")]),t._v(" "),e("h3",{attrs:{id:"hybrid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hybrid"}},[t._v("#")]),t._v(" Hybrid")]),t._v(" "),e("h3",{attrs:{id:"uni-app"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uni-app"}},[t._v("#")]),t._v(" uni-app")]),t._v(" "),e("h3",{attrs:{id:"rn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rn"}},[t._v("#")]),t._v(" RN")]),t._v(" "),e("h3",{attrs:{id:"flutter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flutter"}},[t._v("#")]),t._v(" Flutter")]),t._v(" "),e("h3",{attrs:{id:"小程序mpvue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小程序mpvue"}},[t._v("#")]),t._v(" 小程序MPVUE")]),t._v(" "),e("h3",{attrs:{id:"weex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weex"}},[t._v("#")]),t._v(" Weex")]),t._v(" "),e("h3",{attrs:{id:"pwa"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[t._v("#")]),t._v(" PWA")]),t._v(" "),e("h1",{attrs:{id:"工程化方面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工程化方面"}},[t._v("#")]),t._v(" 工程化方面")]),t._v(" "),e("h3",{attrs:{id:"webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),e("h3",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),e("h3",{attrs:{id:"linux-nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-nginx"}},[t._v("#")]),t._v(" linux/nginx")]),t._v(" "),e("h1",{attrs:{id:"全栈方面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全栈方面"}},[t._v("#")]),t._v(" 全栈方面")]),t._v(" "),e("h3",{attrs:{id:"node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[t._v("#")]),t._v(" node")]),t._v(" "),e("h3",{attrs:{id:"express"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#express"}},[t._v("#")]),t._v(" express")]),t._v(" "),e("h3",{attrs:{id:"koa2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#koa2"}},[t._v("#")]),t._v(" koa2")]),t._v(" "),e("h3",{attrs:{id:"mongodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mongodb"}},[t._v("#")]),t._v(" mongodb")]),t._v(" "),e("h3",{attrs:{id:"nuxt-js-next-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nuxt-js-next-js"}},[t._v("#")]),t._v(" nuxt.js/next.js")]),t._v(" "),e("h1",{attrs:{id:"框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[t._v("#")]),t._v(" 框架")]),t._v(" "),e("h2",{attrs:{id:"vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),e("h3",{attrs:{id:"基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),e("h3",{attrs:{id:"核心原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心原理"}},[t._v("#")]),t._v(" 核心原理")]),t._v(" "),e("h3",{attrs:{id:"mvvm的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm的理解"}},[t._v("#")]),t._v(" MVVM的理解")]),t._v(" "),e("ul",[e("li",[t._v("Model-View-ViewModel的缩写，Model代表数据模型，View代表UI组件,ViewModel将Model和View关联起来")]),t._v(" "),e("li",[t._v("数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知"),e("strong",[t._v("viewModel")]),t._v("层更新数据")])]),t._v(" "),e("h3",{attrs:{id:"vue2-x响应式数据-双向绑定原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue2-x响应式数据-双向绑定原理"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Vue2.x响应式数据/双向绑定原理")])]),t._v(" "),e("ul",[e("li",[t._v("Vue 数据双向绑定主要是指："),e("strong",[t._v("数据变化更新视图，视图变化更新数据")]),t._v("。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何"),e("strong",[t._v("根据Data变化更新View")]),t._v("。")])]),t._v(" "),e("h4",{attrs:{id:"简述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简述"}},[t._v("#")]),t._v(" 简述")]),t._v(" "),e("ul",[e("li",[t._v("当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。")]),t._v(" "),e("li",[t._v("这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。")]),t._v(" "),e("li",[t._v("每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。")])]),t._v(" "),e("h4",{attrs:{id:"深入理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入理解"}},[t._v("#")]),t._v(" 深入理解")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("监听器 Observer")]),t._v("：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。")]),t._v(" "),e("li",[e("strong",[t._v("解析器 Compile")]),t._v("：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。")]),t._v(" "),e("li",[e("strong",[t._v("订阅者 Watcher")]),t._v("：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新——这是一个典型的观察者模式")]),t._v(" "),e("li",[e("strong",[t._v("订阅器 Dep")]),t._v("：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。")])]),t._v(" "),e("h3",{attrs:{id:"vue3-x响应式数据原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3-x响应式数据原理"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Vue3.x响应式数据原理")])]),t._v(" "),e("h4",{attrs:{id:"vue3-x改用proxy替代object-defineproperty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3-x改用proxy替代object-defineproperty"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Vue3.x改用Proxy替代Object.defineProperty")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。")])]),t._v(" "),e("li",[e("p",[t._v("Proxy只会代理对象的第一层，Vue3是怎样处理这个问题的呢？")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("判断当前Reflect.get的返回值是否为Object，如果是则再通过reactive方法做代理， 这样就实现了深度观测。(Reflect.get"),e("code",[t._v("方法查找并返回")]),t._v("target"),e("code",[t._v("对象的")]),t._v("name"),e("code",[t._v("属性，如果没有该属性，则返回")]),t._v("undefined)")]),t._v(" "),e("li",[t._v("监测数组的时候可能触发多次get/set，那么如何防止触发多次呢？我们可以判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。")])])])]),t._v(" "),e("h4",{attrs:{id:"proxy-与-object-defineproperty-优劣对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy-与-object-defineproperty-优劣对比"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Proxy 与 Object.defineProperty 优劣对比")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Proxy 的优势如下:")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("Proxy 可以直接监听对象而非属性；")])])]),t._v(" "),e("li",[e("p",[t._v("Proxy 可以直接监听数组的变化；")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；")]),t._v(" "),e("li",[t._v("Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；")]),t._v(" "),e("li",[t._v("Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；")])])]),t._v(" "),e("li",[e("p",[t._v("Object.defineProperty 的优势如下:")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。")])])])]),t._v(" "),e("h3",{attrs:{id:"vue2-x中如何监测数组变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue2-x中如何监测数组变化"}},[t._v("#")]),t._v(" "),e("strong",[t._v("vue2.x中如何监测数组变化")])]),t._v(" "),e("ul",[e("li",[t._v("使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。")]),t._v(" "),e("li",[t._v("如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("vm."),e("code",[t._v("$set")]),t._v(" 的实现原理是：")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("如果目标是数组，直接使用数组的 splice 方法触发相应式；")]),t._v(" "),e("li",[t._v("如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）")])])])]),t._v(" "),e("h3",{attrs:{id:"vue中的diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue中的diff算法"}},[t._v("#")]),t._v(" vue中的diff算法")]),t._v(" "),e("h4",{attrs:{id:"原理-patchvnode是diff发生的地方-整体策略-深度优先-同层比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理-patchvnode是diff发生的地方-整体策略-深度优先-同层比较"}},[t._v("#")]),t._v(" 原理： （patchVnode是diff发生的地方，整体策略：深度优先，同层比较）")]),t._v(" "),e("ul",[e("li",[t._v("1.先同级比较，在比较子节点")]),t._v(" "),e("li",[t._v("2.先判断一方有儿子一方没儿子的情况")]),t._v(" "),e("li",[t._v("3.比较都有儿子的情况")]),t._v(" "),e("li",[t._v("4.递归比较子节点")])]),t._v(" "),e("h4",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1.diff算法是虚拟DOM技术的必然产物：通过新旧虚拟DOM作对比（即diff），将变化的地方更新在真实DOM上；另外，也需要diff高效的执行对比过程，从而降低时间复杂度为O(n)。")])]),t._v(" "),e("li",[e("p",[t._v("2.vue 2.x中为了降低Watcher粒度，每个组件只有一个Watcher与之对应，只有引入diff才能精确找到发生变化的地方。")])]),t._v(" "),e("li",[e("p",[t._v("3.vue中diff执行的时刻是组件实例执行其更新函数时，它会比对上一次渲染结果oldVnode和新的渲染结果newVnode，此过程称为patch。")])]),t._v(" "),e("li",[e("p",[t._v("4.diff过程整体遵循深度优先、同层比较的策略；两个节点之间比较会根据它们是否拥有子节点或者文本节点做不同操作；比较两组子节点是算法的重点，首先假设头尾节点可能相同做4次比对尝试，如果没有找到相同节点才按照通用方式遍历查找，查找结束再按情况处理剩下的节点；借助key通常可以非常精确找到相同节点，因此整个patch过程非常高效")])])]),t._v(" "),e("h3",{attrs:{id:"虚拟dom以及key属性的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom以及key属性的作用"}},[t._v("#")]),t._v(" "),e("strong",[t._v("虚拟Dom以及key属性的作用")])]),t._v(" "),e("h3",{attrs:{id:"更新dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新dom"}},[t._v("#")]),t._v(" 更新DOM")]),t._v(" "),e("ul",[e("li",[t._v("template->render函数 ->AST->patch -> vnode ->dom ->dom api update")])]),t._v(" "),e("h3",{attrs:{id:"nexttick实现原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexttick实现原理是什么"}},[t._v("#")]),t._v(" nextTick实现原理是什么")]),t._v(" "),e("ul",[e("li",[t._v("在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。")]),t._v(" "),e("li",[t._v("nextTick主要使用了"),e("strong",[t._v("宏任务")]),t._v("和"),e("strong",[t._v("微任务")]),t._v("。")]),t._v(" "),e("li",[t._v("根据执行环境分别尝试采用\n"),e("ul",[e("li",[t._v("Promise、")]),t._v(" "),e("li",[t._v("MutationObserver、")]),t._v(" "),e("li",[t._v("setImmediate，")]),t._v(" "),e("li",[t._v("如果以上都不行则采用setTimeout")])])])]),t._v(" "),e("ul",[e("li",[t._v("定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。")])]),t._v(" "),e("h3",{attrs:{id:"vue事件绑定原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue事件绑定原理是什么"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Vue事件绑定原理是什么")])]),t._v(" "),e("ul",[e("li",[t._v("原生事件绑定是通过addEventListener绑定给真实元素的，组件事件绑定是通过Vue自定义的"),e("code",[t._v("$on")]),t._v("实现的。")])]),t._v(" "),e("h3",{attrs:{id:"vue-的父组件和子组件生命周期钩子函数执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-的父组件和子组件生命周期钩子函数执行顺序"}},[t._v("#")]),t._v(" Vue 的父组件和子组件生命周期钩子函数执行顺序")]),t._v(" "),e("ul",[e("li",[t._v("加载渲染过程： 父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted")]),t._v(" "),e("li",[t._v("子组件更新过程： 父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated")]),t._v(" "),e("li",[t._v("父组件更新过程： 父 beforeUpdate -> 父 updated")]),t._v(" "),e("li",[t._v("销毁过程： 父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed")])]),t._v(" "),e("h4",{attrs:{id:"如何子代修改父代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何子代修改父代"}},[t._v("#")]),t._v(" 如何子代修改父代")]),t._v(" "),e("ul",[e("li",[e("h5",{attrs:{id:"子代修改父代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子代修改父代"}},[t._v("#")]),t._v(" 子代修改父代")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("订阅自定义事件：调用组件的时候基于属性传递一个方法 （父）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<my-component @func='xxx'></my-component>\n\nnew Vue({\n  methods:{\n    xxx(value){\n      //=>value是this.$emit时候传递的第二个参数值\n    }\n  }\n});\n\n")])])])]),t._v(" "),e("li",[e("p",[t._v("通知自定义事件执行 （子）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n  methods:{\n    xxx(){\n      this.$emit('func',10);\n    }\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("也可以基于此方法实现兄弟组件（父子组件、隔代组件）之间的信息通信EventBus($on/$emit)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let eventBus=new Vue; //=>创建事件总线\n\n//A组件\neventBus.$on('xxxA',this.func);\n\n//B组件\neventBus.$emit('xxxA');\n")])])])])])]),t._v(" "),e("li",[e("p",[t._v("基于ref实现父子组件信息通信")]),t._v(" "),e("ul",[e("li",[t._v("ref 如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例，基于此可以快速获取和操作子组件中的数据")]),t._v(" "),e("li",[t._v("$parent和$children是获取组件和子组件的实例，只不过$children是一个数组集合，需要我们记住组件顺序才可以")])])]),t._v(" "),e("li",[e("p",[t._v("基于provide和inject实现祖先与后代的通信")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("祖先组件基于provide注册需要供后代组件使用的数据")]),t._v(" "),e("div",{staticClass:"language-\\ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n  provide:{ //=>对象或者返回对象的函数都可以（属性值如果是data中的数据，则必须使用函数的方法进行处理）\n    name:'eggs',\n    year:10\n  },\n  ...\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("后代组件基于inject声明需要使用的数据并调取使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n  inject:['name'],\n  methods:{\n    func(){\n      let name=this.name;\n    }\n  }\n}\n")])])])])])])]),t._v(" "),e("h3",{attrs:{id:"什么是mvc-mvp-mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvc-mvp-mvvm"}},[t._v("#")]),t._v(" 什么是MVC，MVP，MVVM")]),t._v(" "),e("h4",{attrs:{id:"mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" MVC")]),t._v(" "),e("ul",[e("li",[t._v("Model 代表数据模型，主要任务就是操作数据\n"),e("ul",[e("li",[t._v("将新的数据发送到View，用户得到反馈")])])]),t._v(" "),e("li",[t._v("View 代表UI视图，主要任务将数据模型转换成UI视图展现出来\n"),e("ul",[e("li",[t._v("传送指令到Contrller")])])]),t._v(" "),e("li",[t._v("Controller 控制器，主要任务负责处理业务逻辑\n"),e("ul",[e("li",[t._v("完成业务逻辑后，要求Model改变状态")])])])]),t._v(" "),e("h4",{attrs:{id:"mvp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[t._v("#")]),t._v(" MVP")]),t._v(" "),e("ul",[e("li",[t._v("各部分之间的通信，都是双向的")]),t._v(" "),e("li",[t._v("View与Model不发生联系，都通过Presenter传递")]),t._v(" "),e("li",[t._v("View非常薄，不部署任何业务逻辑，成为“被动试图”（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在哪里")])]),t._v(" "),e("h4",{attrs:{id:"mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[t._v("#")]),t._v(" MVVM")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Model 代表数据模型，主要任务就是操作数据")])]),t._v(" "),e("li",[e("p",[t._v("View 代表UI视图，主要任务将数据模型转换成UI视图展现出来")])]),t._v(" "),e("li",[e("p",[t._v("ViewModel监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View和Model的对象，链接Model和View")])]),t._v(" "),e("li",[e("p",[t._v("在MVVM架构下，View和Model之间并没有直接的联系，而是通过ViewModel进行交互，Model和ViewModel之间的交互式双向的，因此View数据的变化会同步到Model中，而Model数据的变化也会立即反应到View上")])]),t._v(" "),e("li",[e("p",[t._v("ViewModel通过双向的数据绑定吧View层和Model层链接了起来，而View和Model之间的同步工作完全是自动的，无需人为干涉，因此开发者只需要关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由MVVM来统一管理")])])]),t._v(" "),e("h3",{attrs:{id:"vue组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件化"}},[t._v("#")]),t._v(" Vue组件化")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("任何一个页面我们都可以抽象成由一堆组件构成的一个大的组件树，大到一个页面，小到一个按钮都可以是一个组件，一个页面就是有由很多的组件嵌套拼接组成，这就是组件化")])]),t._v(" "),e("li",[e("p",[t._v("组件化的好处：复用性强，分工开发，代码好管理，耦合度低")])]),t._v(" "),e("li",[e("p",[t._v("Vue如何创建组件：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("全局组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.component('组件的名称'，组件详情的对象)\n")])])])]),t._v(" "),e("li",[e("p",[t._v("局部组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new Vue({\n\tcomponents:{\n\t\t组件名称：组件详情的对象\n\t}\n})\n")])])])]),t._v(" "),e("li",[e("p",[t._v("单文件组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// .vue文件\n<template>\n<style>\n<script>\n")])])])])])])]),t._v(" "),e("h3",{attrs:{id:"v-if和v-for哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-if和v-for哪个优先级更高-如果两个同时出现-应该怎么优化得到更好的性能"}},[t._v("#")]),t._v(" v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？")]),t._v(" "),e("ul",[e("li",[t._v("源码中找答案compiler/codegen/index.js")]),t._v(" "),e("li",[t._v("显然v-for优先于v-if被解析（把你是怎么知道的告诉面试官）")]),t._v(" "),e("li",[t._v("如果同时出现，每次渲染都会先执行循环再判断条件，无论如何循环都不可避免，浪费了性能")]),t._v(" "),e("li",[t._v("要避免出现这种情况，则在外层嵌套template，在这一层进行v-if判断，然后在内部进行v-for循环")]),t._v(" "),e("li",[t._v("如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项")])]),t._v(" "),e("h3",{attrs:{id:"vue组件data为什么必须是个函数而vue的根实例则没有此限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件data为什么必须是个函数而vue的根实例则没有此限制"}},[t._v("#")]),t._v(" Vue组件data为什么必须是个函数而Vue的根实例则没有此限制？")]),t._v(" "),e("ul",[e("li",[t._v("源码中找答案：src\\core\\instance\\state.js - initData()")]),t._v(" "),e("li",[t._v("Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则不存在该限制，也是因为根实例只能有一个，不需要担心这种情况。")]),t._v(" "),e("li",[t._v("一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。")]),t._v(" "),e("li",[t._v("如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。")]),t._v(" "),e("li",[t._v("组件复用时所有组件实例都会共享data，如果data是对象的话，就会造成一个组件修改data以后会影响到其他所有组件，所以需要将data写成函数，每次用到就调用一次函数获得新的数据")]),t._v(" "),e("li",[t._v("当我们使用new Vue()的方式的时候，无论我们将data设置为对象还是函数都是可以的，因为new Vue()的方式是生成一个根组件，该组件不会复用，也就不存在共享data的情况了。")])]),t._v(" "),e("h3",{attrs:{id:"v-show-和-v-if区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-show-和-v-if区别"}},[t._v("#")]),t._v(" v-show 和 v-if区别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("实现本质：")]),t._v(" "),e("ul",[e("li",[t._v("v-show：通过display：none和display：block之间切换")]),t._v(" "),e("li",[t._v("v-if：通过DOM节点的插入，删除来实现切换")])])]),t._v(" "),e("li",[e("p",[t._v("性能对比：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("v-if：")]),t._v(" "),e("ul",[e("li",[t._v("切换时需要删除、插入节点开销大")]),t._v(" "),e("li",[t._v("但是在初始化的时候，如果条件是false是不会插入节点渲染的会节约性能")]),t._v(" "),e("li",[t._v("总结：如果不是频繁切换只需要，渲染时条件渲染用v-if")])])]),t._v(" "),e("li",[e("p",[t._v("v-show：")]),t._v(" "),e("ul",[e("li",[t._v("有更高的初始渲染开销。就算是false也会渲染")]),t._v(" "),e("li",[t._v("但是在切换的时候只是改变样式，消耗少。")]),t._v(" "),e("li",[t._v("总结：在频繁切换的时候用v-show")])])])])])]),t._v(" "),e("ul",[e("li",[t._v("当条件不成立时，v-if不会渲染DOM元素，v-show操作的是样式(display)，切换当前DOM的显示和隐藏。")]),t._v(" "),e("li",[t._v("v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；")]),t._v(" "),e("li",[t._v("v-show 则适用于需要非常频繁切换条件的场景。")])]),t._v(" "),e("h3",{attrs:{id:"方法调用、computed、watch的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法调用、computed、watch的区别"}},[t._v("#")]),t._v(" 方法调用、computed、watch的区别")]),t._v(" "),e("h4",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("ul",[e("li",[t._v("页面数据每次重新渲染都会重新执行。性能消耗大。除非不希望有缓存的时候用。")])]),t._v(" "),e("h4",{attrs:{id:"computed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[t._v("#")]),t._v(" computed")]),t._v(" "),e("ul",[e("li",[t._v("是计算属性，依赖其他属性计算值，并且coputed的值有缓存，只有当计算值变化才会返回内容。")]),t._v(" "),e("li",[t._v("是计算属性，依赖其它属性值，并且 computed 的值有"),e("strong",[t._v("缓存")]),t._v("，只有它"),e("strong",[t._v("依赖的属性值")]),t._v("发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；")])]),t._v(" "),e("h4",{attrs:{id:"watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[t._v("#")]),t._v(" watch")]),t._v(" "),e("ul",[e("li",[t._v("监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。")]),t._v(" "),e("li",[t._v("没有缓存性，更多的是「"),e("strong",[t._v("观察")]),t._v("」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；当我们需要深度监听对象中的属性时，可以打开deep：true选项，这样便会对对象中的每一项进行监听")])]),t._v(" "),e("h4",{attrs:{id:"总结-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ul",[e("li",[t._v("除非不希望缓存，一般都不会用方法。")]),t._v(" "),e("li",[t._v("一般来说需要依赖别的属性来动态获得值的时候可以使用computed")]),t._v(" "),e("li",[t._v("对于监听到值的变化需要做异步操作或开销较大的操作时用watch")])]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("运用场景")]),t._v("：")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；")]),t._v(" "),e("li",[t._v("当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用watch选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")])])])]),t._v(" "),e("h3",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("h4",{attrs:{id:"什么是生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是生命周期"}},[t._v("#")]),t._v(" 什么是生命周期")]),t._v(" "),e("ul",[e("li",[t._v("生命周期就是物体从诞生到死亡的过程，vue的生命周期就是vue从初始化到销毁的过程")])]),t._v(" "),e("h4",{attrs:{id:"什么是钩子函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是钩子函数"}},[t._v("#")]),t._v(" 什么是钩子函数")]),t._v(" "),e("ul",[e("li",[t._v("在生命周期的过程中我们有很多特殊的时间段，我希望在这些特殊的时间段对vue做一些事情，所以出现了钩子函数。")]),t._v(" "),e("li",[t._v("钩子函数就是作者在设计vue的时候，在vue从初始化到销毁这段时间内到特出时段给我们一些定义函数的权利")]),t._v(" "),e("li",[t._v("如果咱们定义了，就会执行，不定义就不会执行")])]),t._v(" "),e("h4",{attrs:{id:"vue都有哪些生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue都有哪些生命周期"}},[t._v("#")]),t._v(" vue都有哪些生命周期")]),t._v(" "),e("ul",[e("li",[t._v("beforeCreate 创建前\n"),e("ul",[e("li",[t._v("刚执行new的操作，其他什么都没做")])])]),t._v(" "),e("li",[t._v("created 创建后\n"),e("ul",[e("li",[t._v("属性和方法挂载到实例上面")])])]),t._v(" "),e("li",[t._v("beforeMout 挂载前\n"),e("ul",[e("li",[t._v("找到了el或者mout对应的节点范围，但是数据还没替换")])])]),t._v(" "),e("li",[t._v("mouted 挂载后\n"),e("ul",[e("li",[t._v("vue范围内的变量会被替换成data里对应的数据值")])])]),t._v(" "),e("li",[t._v("beforeUpdate 数据更新前")]),t._v(" "),e("li",[t._v("updated 数据更新后")]),t._v(" "),e("li",[t._v("beforeDestroy 销毁前")]),t._v(" "),e("li",[t._v("destroyed 销毁后")])]),t._v(" "),e("h4",{attrs:{id:"我们在项目中都什么时候用到"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#我们在项目中都什么时候用到"}},[t._v("#")]),t._v(" 我们在项目中都什么时候用到")]),t._v(" "),e("ul",[e("li",[t._v("我们在页面初始化时候需要获取数据，这个时候就可以在生命周期里调用")])]),t._v(" "),e("h3",{attrs:{id:"keep-alive组件有什么作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive组件有什么作用"}},[t._v("#")]),t._v(" keep-alive组件有什么作用")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("动态组件如果不加keep-alive相当于每次都会销毁，诞生")])]),t._v(" "),e("li",[e("p",[t._v("如果你需要在切换的时候，保存一些组件的状态防止多次渲染，就可以使用keep-alive组件包裹需要保存的组件")])]),t._v(" "),e("li",[e("p",[t._v("keep-alive单独的两个生命周期")]),t._v(" "),e("ul",[e("li",[t._v("activated")]),t._v(" "),e("li",[t._v("deactivated")])])]),t._v(" "),e("li",[e("p",[t._v("用keep-alive包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行deactivated钩子函数")])]),t._v(" "),e("li",[e("p",[t._v("Props：")]),t._v(" "),e("ul",[e("li",[t._v("include - 字符串或正则表达式。只有名称匹配的组件会被缓存。")]),t._v(" "),e("li",[t._v("exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。")]),t._v(" "),e("li",[t._v("max - 数字。最多可以缓存多少组件实例。")])])])]),t._v(" "),e("h3",{attrs:{id:"父子组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父子组件通信"}},[t._v("#")]),t._v(" 父子组件通信")]),t._v(" "),e("h4",{attrs:{id:"prop-和-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prop-和-events"}},[t._v("#")]),t._v(" "),e("strong",[t._v("prop 和 events")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("通过 "),e("code",[t._v("prop")]),t._v(" 向下传递，通过事件向上传递是一个 vue 项目最理想的通信状态。")])]),t._v(" "),e("li",[e("p",[t._v("两点需要注意")]),t._v(" "),e("ul",[e("li",[t._v("第一，不应该在一个子组件内部改变 "),e("code",[t._v("prop")]),t._v("，这样会破坏单向的数据绑定，导致数据流难以理解。如果有这样的需要，可以通过 "),e("code",[t._v("data")]),t._v(" 属性接收或使用 "),e("code",[t._v("computed")]),t._v(" 属性进行转换。")]),t._v(" "),e("li",[t._v("第二，如果 "),e("code",[t._v("props")]),t._v(" 传递的是引用类型(对象或者数组)，在子组件中改变这个对象或数组，父组件的状态会也会做相应的更新，利用这一点就能够实现父子组件数据的“双向绑定”，虽然这样实现能够节省代码，但会牺牲数据流向的简洁性，令人难以理解，最好不要这样去做。想要实现父子组件的数据“双向绑定”，可以使用 "),e("code",[t._v("v-model")]),t._v(" 或 "),e("code",[t._v(".sync")]),t._v("。")])])]),t._v(" "),e("li",[e("h5",{attrs:{id:"props-是如何拿到父组件的变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props-是如何拿到父组件的变量"}},[t._v("#")]),t._v(" props 是如何拿到父组件的变量")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("父组件的模板会被解析成一个 模板渲染函数，这时候渲染函数会用with绑定作用域，模板函数会被执行，执行时会绑定父组件为作用域，所以渲染函数内部所有的变量，都会从父组件对象 上去获取")])]),t._v(" "),e("li",[e("p",[t._v("每一个 实例都会有 一个 _props 的同时，也会把属性直接放在 实例上。")])])])]),t._v(" "),e("li",[e("p",[t._v("组件怎么读取props")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("prop 的数据会被 逐一复制到 vm对象上（子组件的实例 this） 上，但是复制的时候，会对每个属性，同时设置 get 和 set 函数，进行 访问转接 和 赋值转接。")]),t._v(" "),e("ul",[e("li",[e("h5",{attrs:{id:"访问转接-你访问-props-其中一个值-vm-childname-其实访问的是-vm-props-childname"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#访问转接-你访问-props-其中一个值-vm-childname-其实访问的是-vm-props-childname"}},[t._v("#")]),t._v(" 访问转接:你访问 props 其中一个值 vm.childName，其实访问的是 vm._props.childName")])]),t._v(" "),e("li",[e("h5",{attrs:{id:"赋值转接-你赋值-vm-childname-5-其实是赋值-vm-props-childname-5。但是你直接在这里给-props-赋值-你是不会影响到-父组件的data-的好吧-两个东西完全没有关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值转接-你赋值-vm-childname-5-其实是赋值-vm-props-childname-5。但是你直接在这里给-props-赋值-你是不会影响到-父组件的data-的好吧-两个东西完全没有关系"}},[t._v("#")]),t._v(" 赋值转接:你赋值 vm.childName= 5 ，其实是赋值 vm._props.childName= 5。但是你直接在这里给 props 赋值，你是不会影响到 父组件的data 的好吧，两个东西完全没有关系")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Object.defineProperty(vm, key, {    \n\n    get() {        \n\n        return this._props[key]\n\n    },    \n\n    set(val) {        \n\n        this._props[key] = val\n\n    }\n});\n")])])])])])]),t._v(" "),e("li",[e("p",[t._v("父组件数据变化，子组件props如何更新")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("每一个实例都会存在 一个 专属watcher")])]),t._v(" "),e("li",[e("p",[t._v("这个watcher 的作用")]),t._v(" "),e("ul",[e("li",[t._v("1、用于实例自己更新视图")]),t._v(" "),e("li",[t._v("2、用于给 依赖的属性保存，然后属性变化的时候，通知实例更新")])])]),t._v(" "),e("li",[e("h5",{attrs:{id:"以-parentname-为例-讲解更新-parentname-是-父组件的-data-然后传给子组件的props-parentname-会收集-父组件的-watcher"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以-parentname-为例-讲解更新-parentname-是-父组件的-data-然后传给子组件的props-parentname-会收集-父组件的-watcher"}},[t._v("#")]),t._v(" 以 parentName 为例，讲解更新，parentName 是 父组件的 data，然后传给子组件的props，parentName 会收集 父组件的 watcher，")])]),t._v(" "),e("li",[e("p",[t._v("在 父组件渲染函数中，因为 Vue 会对组件的渲染函数进行缓存，所以更新的时候，不需要重新解析，直接读取缓存，会加快渲染速度")])]),t._v(" "),e("li",[e("p",[t._v("然后渲染函数执行，开启新一轮的 props 赋值操作。")])])])])]),t._v(" "),e("h4",{attrs:{id:"总结-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ul",[e("li",[t._v("1、父组件 data 的值 和 子组件的 props 一般是没有任何联系的，更改 props 不影响父组件 data，但是如果传入的是 对象，那么修改对象，是会影响父组件的，因为数据是原样传入的，所以修改对象，两个地方都会影响")]),t._v(" "),e("li",[t._v("2、props 也是响应式的，跟 data 本质 差不多")]),t._v(" "),e("li",[t._v("3、props 会访问转接，赋值转接 ，其实操作的是 vm._props 的属性")])]),t._v(" "),e("h4",{attrs:{id:"v-model-指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model-指令"}},[t._v("#")]),t._v(" "),e("strong",[t._v("v-model 指令")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("v-model")]),t._v(" 是用来在表单控件或者组件上创建双向绑定的，他的本质是 "),e("code",[t._v("v-bind")]),t._v(" 和 "),e("code",[t._v("v-on")]),t._v(" 的语法糖，在一个组件上使用 "),e("code",[t._v("v-model")]),t._v("，默认会为组件绑定名为 "),e("code",[t._v("value")]),t._v(" 的 "),e("code",[t._v("prop")]),t._v(" 和名为 "),e("code",[t._v("input")]),t._v(" 的事件。")])]),t._v(" "),e("li",[e("p",[t._v("当我们组件中的某一个 "),e("code",[t._v("prop")]),t._v(" 需要实现上面所说的”双向绑定“时，"),e("code",[t._v("v-model")]),t._v(" 就能大显身手了。有了它，就不需要自己手动在组件上绑定监听当前实例上的自定义事件，会使代码更简洁。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!--父组件--\x3e\n<template>\n    <base-input v-model="input"></base-input>\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                input: \'\'\n            }\n        },\n    }\n<\/script>\n\n\x3c!--子组件--\x3e\n<template>\n    <input type="text" :value="currentValue"  @input="handleInput">\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                currentValue: this.value === undefined || this.value === null ? \'\'\n            }\n        },\n        props: {\n            value: [String, Number],\n        },\n        methods: {\n            handleInput(event) {\n                const value = event.target.value;\n                this.$emit(\'input\', value);\n            },\n        },\n}\n<\/script>\n')])])])]),t._v(" "),e("li",[e("p",[t._v("有时，在某些特定的控件中名为 "),e("code",[t._v("value")]),t._v(" 的属性会有特殊的含义，这时可以通过 "),e("code",[t._v("model")]),t._v(" 选项来回避这种冲突。")])])]),t._v(" "),e("h4",{attrs:{id:"sync-修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sync-修饰符"}},[t._v("#")]),t._v(" "),e("strong",[t._v(".sync 修饰符")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v(".sync")]),t._v(" 修饰符在 vue 1.x 的版本中就已经提供，1.x 版本中，当子组件改变了一个带有 "),e("code",[t._v(".sync")]),t._v(" 的 "),e("code",[t._v("prop")]),t._v(" 的值时，会将这个值同步到父组件中的值。这样使用起来十分方便，但问题也十分明显，这样破坏了单向数据流，当应用复杂时，debug 的成本会非常高。")]),t._v(" "),e("li",[e("strong",[t._v("于是乎")]),t._v("，在vue 2.0中移除了 "),e("code",[t._v(".sync")]),t._v("。但是在实际的应用中，"),e("code",[t._v(".sync")]),t._v(" 是有它的应用场景的，所以在 vue 2.3 版本中，又迎来了全新的 "),e("code",[t._v(".sync")]),t._v("。")]),t._v(" "),e("li",[t._v("新的 "),e("code",[t._v(".sync")]),t._v(" 修饰符所实现的已经不再是真正的双向绑定，它的本质和 "),e("code",[t._v("v-model")]),t._v(" 类似，只是一种缩写。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<text-document\n  v-bind:title="doc.title"\n  v-on:update:title="doc.title = $event"\n></text-document>\n// 上面的代码，使用 .sync 就可以写成\n<text-document v-bind:title.sync="doc.title"></text-document>\n// 这样，在子组件中，就可以通过下面代码来实现对这个 prop 重新赋值的意图了。\nthis.$emit(\'update:title\', newTitle)\n')])])]),e("h4",{attrs:{id:"v-model-和-sync-对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model-和-sync-对比"}},[t._v("#")]),t._v(" v-model 和 .sync 对比")]),t._v(" "),e("ul",[e("li",[e("code",[t._v(".sync")]),t._v(" 从功能上看和 "),e("code",[t._v("v-model")]),t._v(" 十分相似，都是为了实现数据的“双向绑定”，本质上，也都不是真正的双向绑定，而是语法糖。")]),t._v(" "),e("li",[t._v("相比较之下，"),e("code",[t._v(".sync")]),t._v(" 更加灵活，它可以给多个 "),e("code",[t._v("prop")]),t._v(" 使用，而 "),e("code",[t._v("v-model")]),t._v(" 在一个组件中只能有一个。")]),t._v(" "),e("li",[t._v("从语义上来看，"),e("code",[t._v("v-model")]),t._v(" 绑定的值是指这个组件的绑定值，比如 input 组件，select 组件，日期时间选择组件，颜色选择器组件，这些组件所绑定的值使用 "),e("code",[t._v("v-model")]),t._v(" 比较合适。其他情况，没有这种语义，个人认为使用 "),e("code",[t._v(".sync")]),t._v(" 更好。")])]),t._v(" "),e("h4",{attrs:{id:"parent-和-children"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parent-和-children"}},[t._v("#")]),t._v(" $parent 和 $children")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$parent")]),t._v(" 属性可以用来从一个子组件访问父组件的实例，"),e("code",[t._v("$children")]),t._v(" 属性 可以获取当前实例的直接子组件。")]),t._v(" "),e("li",[t._v("看起来使用 "),e("code",[t._v("$parent")]),t._v(" 比使用prop传值更加简单灵活，可以随时获取父组件的数据或方法，又不像使用 "),e("code",[t._v("prop")]),t._v(" 那样需要提前定义好。但使用 "),e("code",[t._v("$parent")]),t._v(" 会导致父组件数据变更后，很难去定位这个变更是从哪里发起的，所以在绝大多数情况下，不推荐使用。")]),t._v(" "),e("li",[t._v("在有些场景下，两个组件之间可能是父子关系，也可能是更多层嵌套的祖孙关系,这时就可以使用 "),e("code",[t._v("$parent")]),t._v("。")])]),t._v(" "),e("h4",{attrs:{id:"ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[t._v("#")]),t._v(" "),e("strong",[t._v("ref")])]),t._v(" "),e("ul",[e("li",[t._v("ref 特性可以为子组件赋予一个 ID 引用，通过这个 ID 引用可以直接访问这个子组件的实例。当父组件中需要主动获取子组件中的数据或者方法时，可以使用 "),e("code",[t._v("$ref")]),t._v(" 来获取。")]),t._v(" "),e("li",[t._v("使用 ref 时，有两点需要注意\n"),e("ul",[e("li",[e("code",[t._v("$refs")]),t._v(" 是作为渲染结果被创建的，所以在初始渲染的时候它还不存在，此时无法无法访问。")]),t._v(" "),e("li",[e("code",[t._v("$refs")]),t._v(" 不是响应式的，只能拿到获取它的那一刻子组件实例的状态，所以要避免在模板和计算属性中使用它。")])])])]),t._v(" "),e("h3",{attrs:{id:"非父子组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非父子组件通信"}},[t._v("#")]),t._v(" 非父子组件通信")]),t._v(" "),e("h4",{attrs:{id:"eventbus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eventbus"}},[t._v("#")]),t._v(" eventBus")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("对于比较小型的项目，没有必要引入 vuex 的情况下，可以使用 "),e("code",[t._v("eventBus")]),t._v("。相比我们上面说的所有通信方式，"),e("code",[t._v("eventBus")]),t._v(" 可以实现任意两个组件间的通信。")])]),t._v(" "),e("li",[e("p",[t._v("它的实现思想也很好理解，在要相互通信的两个组件中，都引入同一个新的vue实例，然后在两个组件中通过分别调用这个实例的事件触发和监听来实现通信。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let Event = new Vue()\nEvent.$emit('sayHello', 'hello');\nEvent.$on('sayHello', target => {\n    console.log(target);  // => 'hello'\n});\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"attrs-和-listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attrs-和-listeners"}},[t._v("#")]),t._v(" "),e("strong",[t._v("$attrs 和 $listeners")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("$attrs")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("$attrs")]),t._v(" 会包含父组件中没有被 "),e("code",[t._v("prop")]),t._v(" 接收的所有属性（不包含class 和 style 属性），可以通过 "),e("code",[t._v('v-bind="$attrs"')]),t._v(" 直接将这些属性传入内部组件。")]),t._v(" "),e("ul",[e("li",[t._v("包含了父作用域中不作为prop被识别（且获取）的attribute绑定（class和style除外）")]),t._v(" "),e("li",[t._v("当一个组件没有声明任何prop时，这里会包含所有父作用域的绑定（class和style除外）")]),t._v(" "),e("li",[t._v('并且可以通过v-bind="$attrs"传入内部组件——在创建高级别的组件时非常有用')])])]),t._v(" "),e("li",[e("p",[t._v("$listeners")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("$listeners")]),t._v(" 会包含所有父组件中的 "),e("code",[t._v("v-on")]),t._v(" 事件监听器 (不包含 "),e("code",[t._v(".native")]),t._v(" 修饰器的) ，可以通过 "),e("code",[t._v('v-on="$listeners"')]),t._v(" 传入内部组件")]),t._v(" "),e("ul",[e("li",[t._v("包含了父作用域中的（不含.native修饰器的）v-on事件监听器。")]),t._v(" "),e("li",[t._v('它可以通过v-on="$listeners"传入内部组件——在创建更高层次的组件时非常有用。')])])]),t._v(" "),e("li",[e("p",[t._v("当要和一个嵌套很深的组件进行通信时，如果使用 "),e("code",[t._v("prop")]),t._v(" 和 "),e("code",[t._v("events")]),t._v(" 就会显的十分繁琐，中间的组件只起到了一个中转站的作用，像下面这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!--父组件--\x3e\n  <parent-component :message="message">我是父组件</parent-component>\n\x3c!--子组件--\x3e\n  <child-component :message="message">我是子组件</child-component>\n\x3c!--孙子组件--\x3e\n  <grand-child-component :message="message">我是孙子组件</grand-child-component>\n')])])])]),t._v(" "),e("li",[e("p",[t._v("当要传递的数据很多时，就需要在中间的每个组件都重复写很多遍，反过来从后代组件向祖先组件使用 events 传递也会有同样的问题。使用 "),e("code",[t._v("$attrs")]),t._v(" 和 "),e("code",[t._v("$listeners")]),t._v(" 就可以简化这样的写法。")])])]),t._v(" "),e("h4",{attrs:{id:"provide-和-inject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provide-和-inject"}},[t._v("#")]),t._v(" "),e("strong",[t._v("provide 和 inject")])]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("provide")]),t._v(" 和 "),e("code",[t._v("inject")]),t._v(" 需要在一起使用，它可以使一个祖先组件向其所有子孙后代注入一个依赖，可以指定想要提供给后代组件的数据/方法，不论组件层次有多深，都能够使用。")])]),t._v(" "),e("li",[e("p",[t._v("不局限于只能从当前父组件的prop属性来获取数据，只要在父组件的生命周期内，子组件都可以调用")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("provide")]),t._v(" 和 "),e("code",[t._v("inject")]),t._v(" 绑定不是响应的，它被设计是为组件库和高阶组件服务的，平常业务中的代码不建议使用。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!--祖先组件--\x3e\n<script>\nexport default {\n    provide: {\n        author: 'yushihu',\n    },\n    data() {},\n}\n<\/script>\n\n\x3c!--子孙组件--\x3e\n<script>\nexport default {\n    inject: ['author'],\n    created() {\n        console.log('author', this.author) // => yushihu\n    },\n}\n<\/script>\n")])])])])]),t._v(" "),e("h4",{attrs:{id:"通过-root-访问根实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过-root-访问根实例"}},[t._v("#")]),t._v(" "),e("strong",[t._v("通过 $root 访问根实例")])]),t._v(" "),e("ul",[e("li",[t._v("通过 "),e("code",[t._v("$root")]),t._v("，任何组件都可以获取当前组件树的根 Vue 实例，通过维护根实例上的 "),e("code",[t._v("data")]),t._v("，就可以实现组件间的数据共享。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//main.js 根实例\nnew Vue({\n    el: '#app',\n    store,\n    router,\n    // 根实例的 data 属性，维护通用的数据\n    data: function () {\n        return {\n            author: ''\n        }\n    },\n    components: { App },\n    template: '<App/>',\n});\n\x3c!--组件A--\x3e\n<script>\nexport default {\n    created() {\n        this.$root.author = '于是乎'\n    }\n}\n<\/script>\n\x3c!--组件B--\x3e\n<template>\n    <div><span>本文作者</span>{{ $root.author }}</div>\n</template>\n")])])]),e("ul",[e("li",[t._v("通过这种方式，虽然可以实现通信，但在应用的任何部分，任何时间发生的任何数据变化，都不会留下变更的记录，这对于稍复杂的应用来说，调试是致命的，不建议在实际应用中使用。")])]),t._v(" "),e("h4",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Vuex")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。对一个中大型单页应用来说是不二之选。")])]),t._v(" "),e("li",[e("p",[t._v("使用 Vuex 并不代表就要把所有的状态放入 Vuex 管理，这样做会让代码变的冗长，无法直观的看出要做什么。对于严格属于组件私有的状态还是应该在组件内部管理更好。")])]),t._v(" "),e("li",[e("p",[t._v("简单的store模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//store.js\nvar store = {\n  debug: true,\n  state: {\n    author: 'yushihu!'\n  },\n  setAuthorAction (newValue) {\n    if (this.debug) console.log('setAuthorAction triggered with', newValue)\n    this.state.author = newValue\n  },\n  deleteAuthorAction () {\n    if (this.debug) console.log('deleteAuthorAction triggered')\n    this.state.author = ''\n  }\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("和 Vuex 一样，store 中 "),e("code",[t._v("state")]),t._v(" 的改变都由 store 内部的 "),e("code",[t._v("action")]),t._v(" 来触发，并且能够通过 "),e("code",[t._v("log")]),t._v(" 保留触发的痕迹。这种方式十分适合在不需要使用 Vuex 的小项目中应用。")])]),t._v(" "),e("li",[e("p",[t._v("与 "),e("code",[t._v("$root")]),t._v(" 访问根实例的方法相比，这种集中式状态管理的方式能够在调试过程中，通过 "),e("code",[t._v("log")]),t._v(" 记录来确定当前变化是如何触发的，更容易定位问题。")])])]),t._v(" "),e("h3",{attrs:{id:"vue路由原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue路由原理"}},[t._v("#")]),t._v(" Vue路由原理")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("根据不同的路径地址，展示不同的页面、组件")])]),t._v(" "),e("li",[e("p",[t._v("hash")]),t._v(" "),e("ul",[e("li",[t._v("hashchange")])])]),t._v(" "),e("li",[e("p",[t._v("histroy")]),t._v(" "),e("ul",[e("li",[t._v("popstate")])])])]),t._v(" "),e("h3",{attrs:{id:"vuex-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex-2"}},[t._v("#")]),t._v(" Vuex")]),t._v(" "),e("h3",{attrs:{id:"vuex是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex是什么"}},[t._v("#")]),t._v(" Vuex是什么")]),t._v(" "),e("ul",[e("li",[t._v("Vuex是专门为Vuejs应用程序设计的"),e("strong",[t._v("状态管理工具")]),t._v("。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。")])]),t._v(" "),e("h3",{attrs:{id:"vuex的构成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex的构成"}},[t._v("#")]),t._v(" Vuex的构成")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("state")]),t._v(" "),e("ul",[e("li",[t._v("state是存储的单一状态，是存储的基本数据")])])]),t._v(" "),e("li",[e("p",[t._v("Getters")]),t._v(" "),e("ul",[e("li",[t._v("getters是store的计算属性，对state的加工，是派生出来的数据。就想computed计算属性一样，getter返回的值会根据它的依赖被缓存起来，且只有当它的依赖值发生改变才会被重新计算。")])])]),t._v(" "),e("li",[e("p",[t._v("Mutations")]),t._v(" "),e("ul",[e("li",[t._v("Mutations提交更改数据，提交mutation，而不是直接改变状态（mutations同步函数）")])])]),t._v(" "),e("li",[e("p",[t._v("Actions")]),t._v(" "),e("ul",[e("li",[t._v("actions像一个装饰器，提交mutation，而不是直接变更状态。（actions可以包含任何异步操作）")])])]),t._v(" "),e("li",[e("p",[t._v("Module")]),t._v(" "),e("ul",[e("li",[t._v("Moudule是store分割的模块，每个模块拥有自己的state、getters、mutations、actions")])])]),t._v(" "),e("li",[e("p",[t._v("辅助函数")]),t._v(" "),e("ul",[e("li",[t._v("Vuex提供了mapState、MapGetters、MapActions、mapMutations等辅助函数给开发在vm中处理store")])])])]),t._v(" "),e("h3",{attrs:{id:"vuex的设计思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex的设计思想"}},[t._v("#")]),t._v(" Vuex的设计思想")]),t._v(" "),e("ul",[e("li",[t._v("Vuex的设计思想，借鉴了Flux、Redux，将数据存放到全局的store，再将store挂载到每个vue实例组件中，利用Vue.js的细粒度数据响应机制来进行高效的状态更新。")])]),t._v(" "),e("h3",{attrs:{id:"vuex的原理解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex的原理解析"}},[t._v("#")]),t._v(" Vuex的原理解析")]),t._v(" "),e("h3",{attrs:{id:"vuex和单纯的全局对象有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex和单纯的全局对象有什么区别"}},[t._v("#")]),t._v(" Vuex和单纯的全局对象有什么区别")]),t._v(" "),e("ul",[e("li",[t._v("Vuex和全局对象主要有两大区别：\n"),e("ul",[e("li",[t._v("1、Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),t._v(" "),e("li",[t._v("2、不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。")])])])]),t._v(" "),e("h3",{attrs:{id:"为什么-vuex-的-mutation-中不能做异步操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-vuex-的-mutation-中不能做异步操作"}},[t._v("#")]),t._v(" 为什么 Vuex 的 mutation 中不能做异步操作")]),t._v(" "),e("ul",[e("li",[t._v("Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。")]),t._v(" "),e("li",[t._v("每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。")])]),t._v(" "),e("h3",{attrs:{id:"vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[t._v("#")]),t._v(" vue-router")]),t._v(" "),e("h3",{attrs:{id:"vue-cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli"}},[t._v("#")]),t._v(" vue-cli")]),t._v(" "),e("h3",{attrs:{id:"element-ui"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#element-ui"}},[t._v("#")]),t._v(" element ui")]),t._v(" "),e("h3",{attrs:{id:"vant"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vant"}},[t._v("#")]),t._v(" vant")]),t._v(" "),e("h3",{attrs:{id:"cube"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cube"}},[t._v("#")]),t._v(" cube")]),t._v(" "),e("h3",{attrs:{id:"ssr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssr"}},[t._v("#")]),t._v(" SSR")]),t._v(" "),e("h3",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("h2",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),e("h3",{attrs:{id:"基础知识-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础知识-2"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),e("ul",[e("li",[t._v("JSX语法（虚拟DOM）")]),t._v(" "),e("li",[t._v("状态")]),t._v(" "),e("li",[t._v("属性")]),t._v(" "),e("li",[t._v("ref")]),t._v(" "),e("li",[t._v("组件")]),t._v(" "),e("li",[t._v("生命周期")]),t._v(" "),e("li",[t._v("PureComponent")]),t._v(" "),e("li",[t._v("Hooks")])]),t._v(" "),e("h3",{attrs:{id:"核心原理-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心原理-2"}},[t._v("#")]),t._v(" 核心原理")]),t._v(" "),e("h3",{attrs:{id:"react-router-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router-dom"}},[t._v("#")]),t._v(" react-router-dom")]),t._v(" "),e("h3",{attrs:{id:"redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" redux")]),t._v(" "),e("h3",{attrs:{id:"react-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" react-redux")]),t._v(" "),e("h3",{attrs:{id:"dva"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dva"}},[t._v("#")]),t._v(" dva")]),t._v(" "),e("h3",{attrs:{id:"umi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#umi"}},[t._v("#")]),t._v(" umi")]),t._v(" "),e("h3",{attrs:{id:"mobix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mobix"}},[t._v("#")]),t._v(" mobix")]),t._v(" "),e("h3",{attrs:{id:"antd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#antd"}},[t._v("#")]),t._v(" antd")]),t._v(" "),e("h3",{attrs:{id:"antd-pro"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#antd-pro"}},[t._v("#")]),t._v(" antd pro")]),t._v(" "),e("h3",{attrs:{id:"ssr-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssr-2"}},[t._v("#")]),t._v(" SSR")]),t._v(" "),e("h3",{attrs:{id:"优化-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化-2"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("h2",{attrs:{id:"react-native"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-native"}},[t._v("#")]),t._v(" React Native")]),t._v(" "),e("h3",{attrs:{id:"生命周期-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-2"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("ul",[e("li",[t._v("当应用启动，React Native框架在内存中维护着一个虚拟DOM树。所谓组件的生命周期即由组件初始化并挂载到虚拟DOM为起始，到组件由虚拟DOM卸载为终结，组件的不同状态。生命周期方法则是组件在虚拟DOM树不同状态的描述。")])]),t._v(" "),e("h4",{attrs:{id:"初始化及挂载阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化及挂载阶段"}},[t._v("#")]),t._v(" 初始化及挂载阶段")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("这是组件类的构造函数，通常在此初始化state数据模型。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("constructor(props) {\n  super(props);\n  this.state = {\n    //key : value\n  };\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("表示组件将要加载到虚拟DOM，在render方法之前执行，整个生命周期只执行一次。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("omponentWillMount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("表示组件已经加载到虚拟DOM，在render方法之后执行，整个生命周期只执行一次。通常在该方法中完成异步网络请求或者集成其他JavaScript库。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidMount() {\n\n}\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"运行期阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行期阶段"}},[t._v("#")]),t._v(" 运行期阶段")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("一、在组件接收到其父组件传递的"),e("code",[t._v("props")]),t._v("的时候执行,参数为父组件传递的"),e("code",[t._v("props")]),t._v("。在组件的整个生命周期可以多次执行。通常在此方法接收新的"),e("code",[t._v("props")]),t._v("值，重新设置"),e("code",[t._v("state")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentWillReceiveProps(nextProps) {\n  this.setState({\n    //key : value\n  });\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("二、在"),e("code",[t._v("componentWillReceiveProps(nextProps)")]),t._v("执行之后立刻执行；或者在"),e("code",[t._v("state")]),t._v("更改之后立刻执行。该方法包含两个参数，分别是"),e("code",[t._v("props")]),t._v("和"),e("code",[t._v("state")]),t._v("。该方法在组件的整个生命周期可以多次执行。如果该方法返回"),e("code",[t._v("false")]),t._v("，则"),e("code",[t._v("componentWillUpdate(nextProps, nextState)")]),t._v("及其之后执行的方法都不会执行，组件则不会进行重新渲染。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("三、在"),e("code",[t._v("shouldComponentUpdate(nextProps, nextState)")]),t._v("函数执行完毕之后立刻调用，该方法包含两个参数，分别是"),e("code",[t._v("props")]),t._v("和"),e("code",[t._v("state")]),t._v("。"),e("code",[t._v("render()")]),t._v("函数执行之前调用。该方法在组件的整个生命周期可以多次执行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentWillUpdate(nextProps, nextState) {\n\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("四、在"),e("code",[t._v("render()")]),t._v("方法执行之后立刻调用。该方法包含两个参数，分别是"),e("code",[t._v("props")]),t._v("和"),e("code",[t._v("state")]),t._v("。该方法在组件的整个生命周期可以多次执行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidUpdate(preProps, preState) {\n\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("五、"),e("code",[t._v("render")]),t._v("方法用于渲染组件。在初始化阶段和运行期阶段都会执行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("render() {\n  return(\n    <View/>\n  );\n}\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"卸载阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#卸载阶段"}},[t._v("#")]),t._v(" 卸载阶段")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在组件由虚拟DOM卸载的时候调用。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentWillUnmount() {\n\n}\n")])])])])]),t._v(" "),e("h1",{attrs:{id:"算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),e("h1",{attrs:{id:"ts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ts"}},[t._v("#")]),t._v(" TS")]),t._v(" "),e("h2",{attrs:{id:"游戏方向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#游戏方向"}},[t._v("#")]),t._v(" 游戏方向")]),t._v(" "),e("h2",{attrs:{id:"可视化或者ai方向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可视化或者ai方向"}},[t._v("#")]),t._v(" 可视化或者AI方向")]),t._v(" "),e("p",[t._v("TS 代码 -> babel编译，webpack打包 ->")]),t._v(" "),e("p",[t._v("JS 代码 -> 词法分析 ->")]),t._v(" "),e("p",[t._v("抽象语法树AST -> 解释器 ->")]),t._v(" "),e("p",[t._v("字节码 -> 编译器")]),t._v(" "),e("p",[t._v("汇编码 -> 执行")])])}),[],!1,null,null,null);a.default=r.exports}}]);